
eVaders-sumobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00002092  00002126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002092  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800142  00800142  00002168  2**0
                  ALLOC
  3 .stab         00004620  00000000  00000000  00002168  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00006b8b  00000000  00000000  00006788  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  0000d313  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000d354  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000088  00000000  00000000  0000d394  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001b8e  00000000  00000000  0000d41c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008f0  00000000  00000000  0000efaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000bb5  00000000  00000000  0000f89a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001a0  00000000  00000000  00010450  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000747  00000000  00000000  000105f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000c2a  00000000  00000000  00010d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a8  00000000  00000000  00011961  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__dtors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__vector_9>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__vector_13>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	3e 67       	ori	r19, 0x7E	; 126
      6a:	33 32       	cpi	r19, 0x23	; 35
	...

0000006d <__c.2212>:
      6d:	3e 67 33 32 00                                      >g32.

00000072 <__c.2210>:
      72:	3e 67 33 32 00                                      >g32.

00000077 <__c.2208>:
      77:	3e 67 33 32 00                                      >g32.

0000007c <__c.2206>:
      7c:	3e 67 33 32 00                                      >g32.

00000081 <__c.2204>:
      81:	3e 67 33 32 00                                      >g32.

00000086 <__c.2202>:
      86:	3e 66 33 32 3e 3e 67 32 30 00                       >f32>>g20.

00000090 <__c.2200>:
      90:	3e 66 33 32 3e 3e 67 32 30 00                       >f32>>g20.

0000009a <__c.2197>:
      9a:	3e 67 32 30 3e 3e 66 33 32 00                       >g20>>f32.

000000a4 <__c.2195>:
      a4:	3e 66 33 32 3e 3e 67 32 30 00                       >f32>>g20.

000000ae <__c.2192>:
      ae:	3e 66 33 32 3e 3e 67 32 30 00                       >f32>>g20.

000000b8 <__c.2180>:
      b8:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000c2 <__ctors_end>:
      c2:	95 0b       	sbc	r25, r21

000000c4 <__dtors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e2 e9       	ldi	r30, 0x92	; 146
      d8:	f0 e2       	ldi	r31, 0x20	; 32
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a2 34       	cpi	r26, 0x42	; 66
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	21 e0       	ldi	r18, 0x01	; 1
      e8:	a2 e4       	ldi	r26, 0x42	; 66
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a0 3b       	cpi	r26, 0xB0	; 176
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
      f6:	0e 94 cc 02 	call	0x598	; 0x598 <main>
      fa:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__do_global_dtors>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <line_sensor_check>:
// LINE_SENSOR_CHECK
// Returns an integer value from -20 to 20 which indicates the difference in
// IR light between the 5 on-board IR sensors (middle sensor is unused here).
// The integer range can be used to determine whether or not the robot should go
// left or right whenever it encounters uneven light.
int line_sensor_check(unsigned int *sensorVals, int sensorTimeOut ){
     102:	ef 92       	push	r14
     104:	ff 92       	push	r15
     106:	0f 93       	push	r16
     108:	1f 93       	push	r17
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	cd b7       	in	r28, 0x3d	; 61
     110:	de b7       	in	r29, 0x3e	; 62
     112:	2a 97       	sbiw	r28, 0x0a	; 10
     114:	0f b6       	in	r0, 0x3f	; 63
     116:	f8 94       	cli
     118:	de bf       	out	0x3e, r29	; 62
     11a:	0f be       	out	0x3f, r0	; 63
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	7c 01       	movw	r14, r24
     120:	8b 01       	movw	r16, r22
	read_line_sensors(sensorVals, IR_EMITTERS_ON);
     122:	61 e0       	ldi	r22, 0x01	; 1
     124:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <read_line_sensors>
	unsigned int tmp[5];
	int sum = 0, tmpDivisor;
	
	tmp[0] = -sensorVals[0];
     128:	f7 01       	movw	r30, r14
     12a:	80 81       	ld	r24, Z
     12c:	91 81       	ldd	r25, Z+1	; 0x01
     12e:	91 95       	neg	r25
     130:	81 95       	neg	r24
     132:	91 09       	sbc	r25, r1
     134:	9a 83       	std	Y+2, r25	; 0x02
     136:	89 83       	std	Y+1, r24	; 0x01
	tmp[1] = -sensorVals[1];
     138:	82 81       	ldd	r24, Z+2	; 0x02
     13a:	93 81       	ldd	r25, Z+3	; 0x03
     13c:	91 95       	neg	r25
     13e:	81 95       	neg	r24
     140:	91 09       	sbc	r25, r1
     142:	9c 83       	std	Y+4, r25	; 0x04
     144:	8b 83       	std	Y+3, r24	; 0x03
	tmp[2] = 0;
     146:	1e 82       	std	Y+6, r1	; 0x06
     148:	1d 82       	std	Y+5, r1	; 0x05
	tmp[3] = sensorVals[3];
     14a:	86 81       	ldd	r24, Z+6	; 0x06
     14c:	97 81       	ldd	r25, Z+7	; 0x07
     14e:	98 87       	std	Y+8, r25	; 0x08
     150:	8f 83       	std	Y+7, r24	; 0x07
	tmp[4] = sensorVals[4];
     152:	80 85       	ldd	r24, Z+8	; 0x08
     154:	91 85       	ldd	r25, Z+9	; 0x09
     156:	9a 87       	std	Y+10, r25	; 0x0a
     158:	89 87       	std	Y+9, r24	; 0x09
	
	for (int i = 0; i < 5; i++){
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	90 e0       	ldi	r25, 0x00	; 0
// The integer range can be used to determine whether or not the robot should go
// left or right whenever it encounters uneven light.
int line_sensor_check(unsigned int *sensorVals, int sensorTimeOut ){
	read_line_sensors(sensorVals, IR_EMITTERS_ON);
	unsigned int tmp[5];
	int sum = 0, tmpDivisor;
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	30 e0       	ldi	r19, 0x00	; 0
	tmp[1] = -sensorVals[1];
	tmp[2] = 0;
	tmp[3] = sensorVals[3];
	tmp[4] = sensorVals[4];
	
	for (int i = 0; i < 5; i++){
     162:	0e c0       	rjmp	.+28     	; 0x180 <line_sensor_check+0x7e>
		sum += tmp[i];
     164:	fc 01       	movw	r30, r24
     166:	ee 0f       	add	r30, r30
     168:	ff 1f       	adc	r31, r31
     16a:	41 e0       	ldi	r20, 0x01	; 1
     16c:	50 e0       	ldi	r21, 0x00	; 0
     16e:	4c 0f       	add	r20, r28
     170:	5d 1f       	adc	r21, r29
     172:	e4 0f       	add	r30, r20
     174:	f5 1f       	adc	r31, r21
     176:	40 81       	ld	r20, Z
     178:	51 81       	ldd	r21, Z+1	; 0x01
     17a:	24 0f       	add	r18, r20
     17c:	35 1f       	adc	r19, r21
	tmp[1] = -sensorVals[1];
	tmp[2] = 0;
	tmp[3] = sensorVals[3];
	tmp[4] = sensorVals[4];
	
	for (int i = 0; i < 5; i++){
     17e:	01 96       	adiw	r24, 0x01	; 1
     180:	85 30       	cpi	r24, 0x05	; 5
     182:	91 05       	cpc	r25, r1
     184:	7c f3       	brlt	.-34     	; 0x164 <line_sensor_check+0x62>
		sum += tmp[i];
	}
	
	tmpDivisor = sensorTimeOut/10;
     186:	c8 01       	movw	r24, r16
     188:	6a e0       	ldi	r22, 0x0A	; 10
     18a:	70 e0       	ldi	r23, 0x00	; 0
     18c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__divmodhi4>
	sum = (sum/tmpDivisor);
     190:	c9 01       	movw	r24, r18
     192:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__divmodhi4>
     196:	cb 01       	movw	r24, r22
	
	return sum;
}
     198:	2a 96       	adiw	r28, 0x0a	; 10
     19a:	0f b6       	in	r0, 0x3f	; 63
     19c:	f8 94       	cli
     19e:	de bf       	out	0x3e, r29	; 62
     1a0:	0f be       	out	0x3f, r0	; 63
     1a2:	cd bf       	out	0x3d, r28	; 61
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	1f 91       	pop	r17
     1aa:	0f 91       	pop	r16
     1ac:	ff 90       	pop	r15
     1ae:	ef 90       	pop	r14
     1b0:	08 95       	ret

000001b2 <check_border>:


// CHECK_BORDER
// Returns integer 1 if any of the sensors detect that there is white light or whatever
int check_border(unsigned int *sensorVals, int sensorTimeOut){
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	ec 01       	movw	r28, r24
     1bc:	8b 01       	movw	r16, r22
	int flag = 0;
	
	read_line_sensors(sensorVals, IR_EMITTERS_ON);
     1be:	61 e0       	ldi	r22, 0x01	; 1
     1c0:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <read_line_sensors>
	
	for (int i = 0; i < 5; i++){
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0


// CHECK_BORDER
// Returns integer 1 if any of the sensors detect that there is white light or whatever
int check_border(unsigned int *sensorVals, int sensorTimeOut){
	int flag = 0;
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	90 e0       	ldi	r25, 0x00	; 0
	
	read_line_sensors(sensorVals, IR_EMITTERS_ON);
	
	for (int i = 0; i < 5; i++){
     1cc:	11 c0       	rjmp	.+34     	; 0x1f0 <check_border+0x3e>
		if (sensorVals[i] < sensorTimeOut - 500){
     1ce:	f9 01       	movw	r30, r18
     1d0:	ee 0f       	add	r30, r30
     1d2:	ff 1f       	adc	r31, r31
     1d4:	ec 0f       	add	r30, r28
     1d6:	fd 1f       	adc	r31, r29
     1d8:	60 81       	ld	r22, Z
     1da:	71 81       	ldd	r23, Z+1	; 0x01
     1dc:	a8 01       	movw	r20, r16
     1de:	44 5f       	subi	r20, 0xF4	; 244
     1e0:	51 40       	sbci	r21, 0x01	; 1
     1e2:	64 17       	cp	r22, r20
     1e4:	75 07       	cpc	r23, r21
     1e6:	10 f4       	brcc	.+4      	; 0x1ec <check_border+0x3a>
			flag = 1;
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
int check_border(unsigned int *sensorVals, int sensorTimeOut){
	int flag = 0;
	
	read_line_sensors(sensorVals, IR_EMITTERS_ON);
	
	for (int i = 0; i < 5; i++){
     1ec:	2f 5f       	subi	r18, 0xFF	; 255
     1ee:	3f 4f       	sbci	r19, 0xFF	; 255
     1f0:	25 30       	cpi	r18, 0x05	; 5
     1f2:	31 05       	cpc	r19, r1
     1f4:	64 f3       	brlt	.-40     	; 0x1ce <check_border+0x1c>
			flag = 1;
		}
	}	
	
	return flag;	
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	1f 91       	pop	r17
     1fc:	0f 91       	pop	r16
     1fe:	08 95       	ret

00000200 <ping_ultrasound>:

// PING_ULTRASOUND
// Returns distance value based on ultrasound ping
int ping_ultrasound(){
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
     208:	27 97       	sbiw	r28, 0x07	; 7
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	de bf       	out	0x3e, r29	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	cd bf       	out	0x3d, r28	; 61
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
     214:	4b e2       	ldi	r20, 0x2B	; 43
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	5c 83       	std	Y+4, r21	; 0x04
     21a:	4b 83       	std	Y+3, r20	; 0x03
		io->ddrRegister = (unsigned char*)&DDRD;
     21c:	2a e2       	ldi	r18, 0x2A	; 42
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	3e 83       	std	Y+6, r19	; 0x06
     222:	2d 83       	std	Y+5, r18	; 0x05
		io->bitmask = 1 << pin;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	8f 83       	std	Y+7, r24	; 0x07
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
     228:	9b b1       	in	r25, 0x0b	; 11
     22a:	9e 7f       	andi	r25, 0xFE	; 254
     22c:	9b b9       	out	0x0b, r25	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     22e:	ed 81       	ldd	r30, Y+5	; 0x05
     230:	fe 81       	ldd	r31, Y+6	; 0x06
     232:	60 81       	ld	r22, Z
     234:	9f 81       	ldd	r25, Y+7	; 0x07
     236:	96 2b       	or	r25, r22
     238:	90 83       	st	Z, r25
void time_reset(void);

// This is inline for efficiency:
static inline void delay_us(unsigned int microseconds)
{
  __asm__ volatile (
     23a:	e2 e0       	ldi	r30, 0x02	; 2
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	6f 93       	push	r22
     240:	64 e0       	ldi	r22, 0x04	; 4
     242:	6a 95       	dec	r22
     244:	f1 f7       	brne	.-4      	; 0x242 <ping_ultrasound+0x42>
     246:	6f 91       	pop	r22
     248:	31 97       	sbiw	r30, 0x01	; 1
     24a:	c9 f7       	brne	.-14     	; 0x23e <ping_ultrasound+0x3e>
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
     24c:	5c 83       	std	Y+4, r21	; 0x04
     24e:	4b 83       	std	Y+3, r20	; 0x03
		io->ddrRegister = (unsigned char*)&DDRD;
     250:	3e 83       	std	Y+6, r19	; 0x06
     252:	2d 83       	std	Y+5, r18	; 0x05
		io->bitmask = 1 << pin;
     254:	8f 83       	std	Y+7, r24	; 0x07
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
     256:	9b b1       	in	r25, 0x0b	; 11
     258:	91 60       	ori	r25, 0x01	; 1
     25a:	9b b9       	out	0x0b, r25	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     25c:	ed 81       	ldd	r30, Y+5	; 0x05
     25e:	fe 81       	ldd	r31, Y+6	; 0x06
     260:	60 81       	ld	r22, Z
     262:	9f 81       	ldd	r25, Y+7	; 0x07
     264:	96 2b       	or	r25, r22
     266:	90 83       	st	Z, r25
     268:	ea e0       	ldi	r30, 0x0A	; 10
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	6f 93       	push	r22
     26e:	64 e0       	ldi	r22, 0x04	; 4
     270:	6a 95       	dec	r22
     272:	f1 f7       	brne	.-4      	; 0x270 <ping_ultrasound+0x70>
     274:	6f 91       	pop	r22
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	c9 f7       	brne	.-14     	; 0x26c <ping_ultrasound+0x6c>
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
     27a:	5c 83       	std	Y+4, r21	; 0x04
     27c:	4b 83       	std	Y+3, r20	; 0x03
		io->ddrRegister = (unsigned char*)&DDRD;
     27e:	3e 83       	std	Y+6, r19	; 0x06
     280:	2d 83       	std	Y+5, r18	; 0x05
		io->bitmask = 1 << pin;
     282:	8f 83       	std	Y+7, r24	; 0x07
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
     284:	8b b1       	in	r24, 0x0b	; 11
     286:	8e 7f       	andi	r24, 0xFE	; 254
     288:	8b b9       	out	0x0b, r24	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     28a:	ed 81       	ldd	r30, Y+5	; 0x05
     28c:	fe 81       	ldd	r31, Y+6	; 0x06
     28e:	90 81       	ld	r25, Z
     290:	8f 81       	ldd	r24, Y+7	; 0x07
     292:	89 2b       	or	r24, r25
     294:	80 83       	st	Z, r24
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
     296:	89 e2       	ldi	r24, 0x29	; 41
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	9a 83       	std	Y+2, r25	; 0x02
     29c:	89 83       	std	Y+1, r24	; 0x01
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	8f 83       	std	Y+7, r24	; 0x07
	delay_us(2);
	set_digital_output(TRIG, HIGH);
	delay_us(10);
	set_digital_output(TRIG, LOW);
	
	while(!is_digital_input_high(ECHO)){
     2a2:	49 9b       	sbis	0x09, 1	; 9
     2a4:	f8 cf       	rjmp	.-16     	; 0x296 <ping_ultrasound+0x96>
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	cb 01       	movw	r24, r22
     2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <ping_ultrasound+0xb6>
	}
	
	while(is_digital_input_high(ECHO)){
		timer++;	
     2ae:	6f 5f       	subi	r22, 0xFF	; 255
     2b0:	7f 4f       	sbci	r23, 0xFF	; 255
     2b2:	8f 4f       	sbci	r24, 0xFF	; 255
     2b4:	9f 4f       	sbci	r25, 0xFF	; 255
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
     2b6:	29 e2       	ldi	r18, 0x29	; 41
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	3a 83       	std	Y+2, r19	; 0x02
     2bc:	29 83       	std	Y+1, r18	; 0x01
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
     2be:	22 e0       	ldi	r18, 0x02	; 2
     2c0:	2f 83       	std	Y+7, r18	; 0x07
	set_digital_output(TRIG, LOW);
	
	while(!is_digital_input_high(ECHO)){
	}
	
	while(is_digital_input_high(ECHO)){
     2c2:	49 99       	sbic	0x09, 1	; 9
     2c4:	f4 cf       	rjmp	.-24     	; 0x2ae <ping_ultrasound+0xae>
		timer++;	
	}
		
	distance = timer*0.034/2;
     2c6:	0e 94 91 05 	call	0xb22	; 0xb22 <__floatsisf>
     2ca:	26 e9       	ldi	r18, 0x96	; 150
     2cc:	33 e4       	ldi	r19, 0x43	; 67
     2ce:	4b e0       	ldi	r20, 0x0B	; 11
     2d0:	5d e3       	ldi	r21, 0x3D	; 61
     2d2:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	5f e3       	ldi	r21, 0x3F	; 63
     2de:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
     2e2:	0e 94 59 05 	call	0xab2	; 0xab2 <__fixsfsi>

	return distance;
}
     2e6:	cb 01       	movw	r24, r22
     2e8:	27 96       	adiw	r28, 0x07	; 7
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <spiralRoutine>:
}

// SPIRALROUTINE
// Goes in a spiral based on direction integer, It is frame/time based
void spiralRoutine (int direction){
	if (spiralFlag == 1){
     2fa:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <spiralFlag>
     2fe:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <spiralFlag+0x1>
     302:	21 30       	cpi	r18, 0x01	; 1
     304:	31 05       	cpc	r19, r1
     306:	81 f5       	brne	.+96     	; 0x368 <spiralRoutine+0x6e>
		if (tmpSpiral >= spiralMaxFrame){
     308:	40 91 99 01 	lds	r20, 0x0199	; 0x800199 <tmpSpiral>
     30c:	50 91 9a 01 	lds	r21, 0x019A	; 0x80019a <tmpSpiral+0x1>
     310:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <spiralMaxFrame>
     314:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <spiralMaxFrame+0x1>
     318:	42 17       	cp	r20, r18
     31a:	53 07       	cpc	r21, r19
     31c:	d4 f0       	brlt	.+52     	; 0x352 <spiralRoutine+0x58>
			tmpSpiral = 0;
     31e:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <tmpSpiral+0x1>
     322:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <tmpSpiral>
			
			if (spiralSpeed > spiralUpperLimit){
     326:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <spiralSpeed>
     32a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <spiralSpeed+0x1>
     32e:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <spiralUpperLimit>
     332:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <spiralUpperLimit+0x1>
     336:	42 17       	cp	r20, r18
     338:	53 07       	cpc	r21, r19
     33a:	2c f4       	brge	.+10     	; 0x346 <spiralRoutine+0x4c>
				spiralFlag = 0;
     33c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <spiralFlag+0x1>
     340:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <spiralFlag>
     344:	06 c0       	rjmp	.+12     	; 0x352 <spiralRoutine+0x58>
				}	else{
				spiralSpeed++;
     346:	2f 5f       	subi	r18, 0xFF	; 255
     348:	3f 4f       	sbci	r19, 0xFF	; 255
     34a:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <spiralSpeed+0x1>
     34e:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <spiralSpeed>
			}
		}
		
		tmpSpiral++;
     352:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <tmpSpiral>
     356:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <tmpSpiral+0x1>
     35a:	2f 5f       	subi	r18, 0xFF	; 255
     35c:	3f 4f       	sbci	r19, 0xFF	; 255
     35e:	30 93 9a 01 	sts	0x019A, r19	; 0x80019a <tmpSpiral+0x1>
     362:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <tmpSpiral>
     366:	33 c0       	rjmp	.+102    	; 0x3ce <spiralRoutine+0xd4>
		
		} else if (spiralFlag == 0){
     368:	23 2b       	or	r18, r19
     36a:	89 f5       	brne	.+98     	; 0x3ce <spiralRoutine+0xd4>
		if (tmpSpiral >= spiralMaxFrame){
     36c:	40 91 99 01 	lds	r20, 0x0199	; 0x800199 <tmpSpiral>
     370:	50 91 9a 01 	lds	r21, 0x019A	; 0x80019a <tmpSpiral+0x1>
     374:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <spiralMaxFrame>
     378:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <spiralMaxFrame+0x1>
     37c:	42 17       	cp	r20, r18
     37e:	53 07       	cpc	r21, r19
     380:	e4 f0       	brlt	.+56     	; 0x3ba <spiralRoutine+0xc0>
			tmpSpiral = 0;
     382:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <tmpSpiral+0x1>
     386:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <tmpSpiral>
			
			if (spiralSpeed < spiralLowerLimit){
     38a:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <spiralSpeed>
     38e:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <spiralSpeed+0x1>
     392:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <spiralLowerLimit>
     396:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <spiralLowerLimit+0x1>
     39a:	24 17       	cp	r18, r20
     39c:	35 07       	cpc	r19, r21
     39e:	3c f4       	brge	.+14     	; 0x3ae <spiralRoutine+0xb4>
				spiralFlag = 1;
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <spiralFlag+0x1>
     3a8:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <spiralFlag>
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <spiralRoutine+0xc0>
				}	else {
				spiralSpeed--;
     3ae:	21 50       	subi	r18, 0x01	; 1
     3b0:	31 09       	sbc	r19, r1
     3b2:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <spiralSpeed+0x1>
     3b6:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <spiralSpeed>
			}
		}
		tmpSpiral++;
     3ba:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <tmpSpiral>
     3be:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <tmpSpiral+0x1>
     3c2:	2f 5f       	subi	r18, 0xFF	; 255
     3c4:	3f 4f       	sbci	r19, 0xFF	; 255
     3c6:	30 93 9a 01 	sts	0x019A, r19	; 0x80019a <tmpSpiral+0x1>
     3ca:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <tmpSpiral>
	}
	
	if (direction == RIGHT){
     3ce:	81 30       	cpi	r24, 0x01	; 1
     3d0:	91 05       	cpc	r25, r1
     3d2:	49 f4       	brne	.+18     	; 0x3e6 <spiralRoutine+0xec>
		set_motors(200,spiralSpeed);
     3d4:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <spiralSpeed>
     3d8:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <spiralSpeed+0x1>
     3dc:	88 ec       	ldi	r24, 0xC8	; 200
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <set_motors>
     3e4:	08 95       	ret
	} else if (direction == LEFT){
     3e6:	89 2b       	or	r24, r25
     3e8:	41 f4       	brne	.+16     	; 0x3fa <spiralRoutine+0x100>
		set_motors(spiralSpeed,200);
     3ea:	68 ec       	ldi	r22, 0xC8	; 200
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <spiralSpeed>
     3f2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <spiralSpeed+0x1>
     3f6:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <set_motors>
     3fa:	08 95       	ret

000003fc <fullSpeedAhead>:
// speed can only be between 0-255
//
// delay is only for millisecond delay after executing the movement, it can
// just be zero.

void fullSpeedAhead (int distance){
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	ec 01       	movw	r28, r24
	if (ping_ultrasound() < distance){
     402:	0e 94 00 01 	call	0x200	; 0x200 <ping_ultrasound>
     406:	8c 17       	cp	r24, r28
     408:	9d 07       	cpc	r25, r29
     40a:	54 f4       	brge	.+20     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		set_motors(255,255);
     40c:	6f ef       	ldi	r22, 0xFF	; 255
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <set_motors>
		delay_ms(5);
     418:	85 e0       	ldi	r24, 0x05	; 5
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
	}
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	08 95       	ret

00000426 <forward>:

void forward(int delay, int speed){
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
     42c:	cb 01       	movw	r24, r22
	set_motors(speed, speed);
     42e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <set_motors>
	delay_ms(delay);
     432:	ce 01       	movw	r24, r28
     434:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
}
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <reverse>:

void reverse(int delay, int speed){
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	ec 01       	movw	r28, r24
	set_motors(-speed, -speed);
     444:	88 27       	eor	r24, r24
     446:	99 27       	eor	r25, r25
     448:	86 1b       	sub	r24, r22
     44a:	97 0b       	sbc	r25, r23
     44c:	bc 01       	movw	r22, r24
     44e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <set_motors>
	delay_ms(delay);
     452:	ce 01       	movw	r24, r28
     454:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <turnLeft>:

void turnLeft(int delay, int speed){
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	ec 01       	movw	r28, r24
     464:	cb 01       	movw	r24, r22
	set_motors(-speed, speed);
     466:	91 95       	neg	r25
     468:	81 95       	neg	r24
     46a:	91 09       	sbc	r25, r1
     46c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <set_motors>
	delay_ms(delay);
     470:	ce 01       	movw	r24, r28
     472:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
}
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <turnRight>:

void turnRight(int delay, int speed){
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
     482:	cb 01       	movw	r24, r22
	set_motors(speed, -speed);
     484:	66 27       	eor	r22, r22
     486:	77 27       	eor	r23, r23
     488:	68 1b       	sub	r22, r24
     48a:	79 0b       	sbc	r23, r25
     48c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <set_motors>
	delay_ms(delay);
     490:	ce 01       	movw	r24, r28
     492:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
}
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <evasionRoutine>:

// EVASIONROUTINE
// Simple evasion routine whose variables are changed in global since it is frame/time based.
void evasionRoutine(){
	
	if (evasionFrame >= 0 && evasionFrame < evadePhase1){
     49c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <evasionFrame>
     4a0:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <evasionFrame+0x1>
     4a4:	8a 30       	cpi	r24, 0x0A	; 10
     4a6:	91 05       	cpc	r25, r1
     4a8:	b8 f4       	brcc	.+46     	; 0x4d8 <evasionRoutine+0x3c>
		// EVADE PHASE 1
		if (evadeDirection == LEFT){
     4aa:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <evadeDirection>
     4ae:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <evadeDirection+0x1>
     4b2:	00 97       	sbiw	r24, 0x00	; 0
     4b4:	39 f4       	brne	.+14     	; 0x4c4 <evasionRoutine+0x28>
			turnLeft(0, 255);
     4b6:	6f ef       	ldi	r22, 0xFF	; 255
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 2f 02 	call	0x45e	; 0x45e <turnLeft>
     4c2:	60 c0       	rjmp	.+192    	; 0x584 <evasionRoutine+0xe8>
		} else if (evadeDirection == RIGHT){
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	09 f0       	breq	.+2      	; 0x4ca <evasionRoutine+0x2e>
     4c8:	5d c0       	rjmp	.+186    	; 0x584 <evasionRoutine+0xe8>
			turnRight(0, 255);
     4ca:	6f ef       	ldi	r22, 0xFF	; 255
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 3e 02 	call	0x47c	; 0x47c <turnRight>
     4d6:	56 c0       	rjmp	.+172    	; 0x584 <evasionRoutine+0xe8>
		}
		
	} else if (evasionFrame >= evadePhase1 && evasionFrame < evadePhase2){
     4d8:	9c 01       	movw	r18, r24
     4da:	2a 50       	subi	r18, 0x0A	; 10
     4dc:	31 09       	sbc	r19, r1
     4de:	26 34       	cpi	r18, 0x46	; 70
     4e0:	31 05       	cpc	r19, r1
     4e2:	b8 f4       	brcc	.+46     	; 0x512 <evasionRoutine+0x76>
		// EVADE PHASE 2
		if (evadeDirection == LEFT){
     4e4:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <evadeDirection>
     4e8:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <evadeDirection+0x1>
     4ec:	00 97       	sbiw	r24, 0x00	; 0
     4ee:	39 f4       	brne	.+14     	; 0x4fe <evasionRoutine+0x62>
			set_motors(255, evadePhase2Radius);
     4f0:	62 e8       	ldi	r22, 0x82	; 130
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	8f ef       	ldi	r24, 0xFF	; 255
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <set_motors>
     4fc:	43 c0       	rjmp	.+134    	; 0x584 <evasionRoutine+0xe8>
		} else if (evadeDirection == RIGHT){
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	09 f0       	breq	.+2      	; 0x504 <evasionRoutine+0x68>
     502:	40 c0       	rjmp	.+128    	; 0x584 <evasionRoutine+0xe8>
			set_motors(evadePhase2Radius, 255);
     504:	6f ef       	ldi	r22, 0xFF	; 255
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	82 e8       	ldi	r24, 0x82	; 130
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <set_motors>
     510:	39 c0       	rjmp	.+114    	; 0x584 <evasionRoutine+0xe8>
		}
		
	} else if (evasionFrame >= evadePhase2 && evasionFrame < evadePhase3){
     512:	9c 01       	movw	r18, r24
     514:	20 55       	subi	r18, 0x50	; 80
     516:	31 09       	sbc	r19, r1
     518:	28 37       	cpi	r18, 0x78	; 120
     51a:	31 05       	cpc	r19, r1
     51c:	40 f5       	brcc	.+80     	; 0x56e <evasionRoutine+0xd2>
		// EVADE PHASE 3
		if (evadeDirection == LEFT){
     51e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <evadeDirection>
     522:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <evadeDirection+0x1>
     526:	00 97       	sbiw	r24, 0x00	; 0
     528:	39 f4       	brne	.+14     	; 0x538 <evasionRoutine+0x9c>
			turnRight(0, evadePhase3CheckSpeed);
     52a:	60 e5       	ldi	r22, 0x50	; 80
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 3e 02 	call	0x47c	; 0x47c <turnRight>
     536:	08 c0       	rjmp	.+16     	; 0x548 <evasionRoutine+0xac>
		} else if (evadeDirection == RIGHT){
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	31 f4       	brne	.+12     	; 0x548 <evasionRoutine+0xac>
			turnLeft(0, evadePhase3CheckSpeed);
     53c:	60 e5       	ldi	r22, 0x50	; 80
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 2f 02 	call	0x45e	; 0x45e <turnLeft>
		}
		
		if (ping_ultrasound() < rammingDistance){
     548:	0e 94 00 01 	call	0x200	; 0x200 <ping_ultrasound>
     54c:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <rammingDistance>
     550:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <rammingDistance+0x1>
     554:	82 17       	cp	r24, r18
     556:	93 07       	cpc	r25, r19
     558:	ac f4       	brge	.+42     	; 0x584 <evasionRoutine+0xe8>
			fullSpeedAhead(rammingDistance);
     55a:	c9 01       	movw	r24, r18
     55c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <fullSpeedAhead>
			evasionFrame = evadePhase2;
     560:	80 e5       	ldi	r24, 0x50	; 80
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <evasionFrame+0x1>
     568:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <evasionFrame>
     56c:	0b c0       	rjmp	.+22     	; 0x584 <evasionRoutine+0xe8>
		}
			
	} else if (evasionFrame >= evadePhase3){
     56e:	88 3c       	cpi	r24, 0xC8	; 200
     570:	91 05       	cpc	r25, r1
     572:	44 f0       	brlt	.+16     	; 0x584 <evasionRoutine+0xe8>
		
		evasionFlag = 0;
     574:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <evasionFlag+0x1>
     578:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <evasionFlag>
		evasionFrame = 0;
     57c:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <evasionFrame+0x1>
     580:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <evasionFrame>
	}
		
	
	
	evasionFrame++;
     584:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <evasionFrame>
     588:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <evasionFrame+0x1>
     58c:	01 96       	adiw	r24, 0x01	; 1
     58e:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <evasionFrame+0x1>
     592:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <evasionFrame>
     596:	08 95       	ret

00000598 <main>:


// ===========================================================================================

int main()
{
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	65 97       	sbiw	r28, 0x15	; 21
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
	play_from_program_space(PSTR(">g32>>c32"));  // Play welcoming notes.
     5ac:	88 eb       	ldi	r24, 0xB8	; 184
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 c9 09 	call	0x1392	; 0x1392 <play_from_program_space>
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
     5b4:	4b e2       	ldi	r20, 0x2B	; 43
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	5e 87       	std	Y+14, r21	; 0x0e
     5ba:	4d 87       	std	Y+13, r20	; 0x0d
		io->ddrRegister = (unsigned char*)&DDRD;
     5bc:	2a e2       	ldi	r18, 0x2A	; 42
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	38 8b       	std	Y+16, r19	; 0x10
     5c2:	2f 87       	std	Y+15, r18	; 0x0f
		io->bitmask = 1 << pin;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	89 8b       	std	Y+17, r24	; 0x11
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
     5c8:	8b b1       	in	r24, 0x0b	; 11
     5ca:	8e 7f       	andi	r24, 0xFE	; 254
     5cc:	8b b9       	out	0x0b, r24	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     5ce:	ef 85       	ldd	r30, Y+15	; 0x0f
     5d0:	f8 89       	ldd	r31, Y+16	; 0x10
     5d2:	90 81       	ld	r25, Z
     5d4:	89 89       	ldd	r24, Y+17	; 0x11
     5d6:	89 2b       	or	r24, r25
     5d8:	80 83       	st	Z, r24
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
     5da:	5e 87       	std	Y+14, r21	; 0x0e
     5dc:	4d 87       	std	Y+13, r20	; 0x0d
		io->ddrRegister = (unsigned char*)&DDRD;
     5de:	38 8b       	std	Y+16, r19	; 0x10
     5e0:	2f 87       	std	Y+15, r18	; 0x0f
		io->bitmask = 1 << pin;
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	89 8b       	std	Y+17, r24	; 0x11
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
	else
		*(ioPin->ddrRegister) &= ~ioPin->bitmask;
     5e6:	8a b1       	in	r24, 0x0a	; 10
     5e8:	8d 7f       	andi	r24, 0xFD	; 253
     5ea:	8a b9       	out	0x0a, r24	; 10
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
     5ec:	ed 85       	ldd	r30, Y+13	; 0x0d
     5ee:	fe 85       	ldd	r31, Y+14	; 0x0e
     5f0:	80 81       	ld	r24, Z
     5f2:	99 89       	ldd	r25, Y+17	; 0x11
     5f4:	90 95       	com	r25
     5f6:	89 23       	and	r24, r25
     5f8:	80 83       	st	Z, r24
	
	
	const int sensorTimeOut = 2000;
	unsigned int sensorVals[5];
	
	pololu_3pi_init(sensorTimeOut);
     5fa:	80 ed       	ldi	r24, 0xD0	; 208
     5fc:	97 e0       	ldi	r25, 0x07	; 7
     5fe:	0e 94 91 0b 	call	0x1722	; 0x1722 <pololu_3pi_init>
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
static inline unsigned long millis(void) { return get_ms(); }
     602:	0e 94 42 0b 	call	0x1684	; 0x1684 <get_ms>
     606:	6b 01       	movw	r12, r22
     608:	7c 01       	movw	r14, r24
	// =============================================================	
	
	
	// SUMOBOT SETUP ============================================================================================================
	
	if (wait_for_button_press(BUTTON_A | BUTTON_B | BUTTON_C) == BUTTON_A) {
     60a:	82 e3       	ldi	r24, 0x32	; 50
     60c:	0e 94 bf 0a 	call	0x157e	; 0x157e <wait_for_button_press>
     610:	82 30       	cpi	r24, 0x02	; 2
     612:	a1 f5       	brne	.+104    	; 0x67c <main+0xe4>
		// A - SETUP INIT BEHAVIOR
		// B - SKIP INIT BEHAVIOR
		play_from_program_space(PSTR(">f32>>g20"));
     614:	8e ea       	ldi	r24, 0xAE	; 174
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 c9 09 	call	0x1392	; 0x1392 <play_from_program_space>
		delay_ms(500);
     61c:	84 ef       	ldi	r24, 0xF4	; 244
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
		
		unsigned char buttonPress = wait_for_button_press(BUTTON_A | BUTTON_B | BUTTON_C);
     624:	82 e3       	ldi	r24, 0x32	; 50
     626:	0e 94 bf 0a 	call	0x157e	; 0x157e <wait_for_button_press>
     62a:	18 2f       	mov	r17, r24
		play_from_program_space(PSTR(">f32>>g20"));
     62c:	84 ea       	ldi	r24, 0xA4	; 164
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 c9 09 	call	0x1392	; 0x1392 <play_from_program_space>
		
		if (buttonPress == BUTTON_A){			// TURN LEFT
     634:	12 30       	cpi	r17, 0x02	; 2
     636:	39 f4       	brne	.+14     	; 0x646 <main+0xae>
			behavior = 1;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <behavior+0x1>
     640:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <behavior>
     644:	16 c0       	rjmp	.+44     	; 0x672 <main+0xda>
		} else if (buttonPress == BUTTON_B){	// SPIN
     646:	10 31       	cpi	r17, 0x10	; 16
     648:	39 f4       	brne	.+14     	; 0x658 <main+0xc0>
			behavior = 2;
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <behavior+0x1>
     652:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <behavior>
     656:	0d c0       	rjmp	.+26     	; 0x672 <main+0xda>
		} else if (buttonPress == BUTTON_C){	// TURN RIGHT
     658:	10 32       	cpi	r17, 0x20	; 32
     65a:	39 f4       	brne	.+14     	; 0x66a <main+0xd2>
			behavior = 3;
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <behavior+0x1>
     664:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <behavior>
     668:	04 c0       	rjmp	.+8      	; 0x672 <main+0xda>
		} else{
			behavior = 0;
     66a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <behavior+0x1>
     66e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <behavior>
		}
		
		delay_ms(500);
     672:	84 ef       	ldi	r24, 0xF4	; 244
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
     67a:	08 c0       	rjmp	.+16     	; 0x68c <main+0xf4>
		
	} else{
		play_from_program_space(PSTR(">g20>>f32"));
     67c:	8a e9       	ldi	r24, 0x9A	; 154
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 c9 09 	call	0x1392	; 0x1392 <play_from_program_space>
		delay_ms(500);
     684:	84 ef       	ldi	r24, 0xF4	; 244
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
	}
	
	// SPIRAL CHECK
	unsigned char buttonPress = wait_for_button_press(BUTTON_A | BUTTON_B | BUTTON_C);
     68c:	82 e3       	ldi	r24, 0x32	; 50
     68e:	0e 94 bf 0a 	call	0x157e	; 0x157e <wait_for_button_press>
     692:	18 2f       	mov	r17, r24
	play_from_program_space(PSTR(">f32>>g20"));
     694:	80 e9       	ldi	r24, 0x90	; 144
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 c9 09 	call	0x1392	; 0x1392 <play_from_program_space>
	
	if (buttonPress == BUTTON_A){				// LEFT SPIRAL
     69c:	12 30       	cpi	r17, 0x02	; 2
     69e:	59 f4       	brne	.+22     	; 0x6b6 <main+0x11e>
		spiralEnableFlag = TRUE;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <spiralEnableFlag+0x1>
     6a8:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <spiralEnableFlag>
		spiralDirection = LEFT;
     6ac:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <spiralDirection+0x1>
     6b0:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <spiralDirection>
     6b4:	13 c0       	rjmp	.+38     	; 0x6dc <main+0x144>
		
	} else if (buttonPress == BUTTON_B){		// DONT SPIRAL
     6b6:	10 31       	cpi	r17, 0x10	; 16
     6b8:	29 f4       	brne	.+10     	; 0x6c4 <main+0x12c>
		spiralEnableFlag = FALSE;
     6ba:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <spiralEnableFlag+0x1>
     6be:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <spiralEnableFlag>
     6c2:	0c c0       	rjmp	.+24     	; 0x6dc <main+0x144>
			
	} else if (buttonPress == BUTTON_C){		// RIGHT SPIRAL
     6c4:	10 32       	cpi	r17, 0x20	; 32
     6c6:	51 f4       	brne	.+20     	; 0x6dc <main+0x144>
		spiralEnableFlag = TRUE;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <spiralEnableFlag+0x1>
     6d0:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <spiralEnableFlag>
		spiralDirection = RIGHT;
     6d4:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <spiralDirection+0x1>
     6d8:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <spiralDirection>
			
	}
	delay_ms(500);
     6dc:	84 ef       	ldi	r24, 0xF4	; 244
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
		
	// EVASION CHECK
	
	buttonPress = wait_for_button_press(BUTTON_A | BUTTON_B | BUTTON_C);
     6e4:	82 e3       	ldi	r24, 0x32	; 50
     6e6:	0e 94 bf 0a 	call	0x157e	; 0x157e <wait_for_button_press>
     6ea:	18 2f       	mov	r17, r24
	play_from_program_space(PSTR(">f32>>g20"));
     6ec:	86 e8       	ldi	r24, 0x86	; 134
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 c9 09 	call	0x1392	; 0x1392 <play_from_program_space>
	
	if (buttonPress == BUTTON_A){				// LEFT EVADE
     6f4:	12 30       	cpi	r17, 0x02	; 2
     6f6:	59 f4       	brne	.+22     	; 0x70e <main+0x176>
		evasionEnableFlag = TRUE;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <evasionEnableFlag+0x1>
     700:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <evasionEnableFlag>
		evadeDirection = LEFT;
     704:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <evadeDirection+0x1>
     708:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <evadeDirection>
     70c:	13 c0       	rjmp	.+38     	; 0x734 <main+0x19c>
		
	} else if (buttonPress == BUTTON_B){		// DONT EVADE
     70e:	10 31       	cpi	r17, 0x10	; 16
     710:	29 f4       	brne	.+10     	; 0x71c <main+0x184>
		evasionEnableFlag = FALSE;
     712:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <evasionEnableFlag+0x1>
     716:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <evasionEnableFlag>
     71a:	0c c0       	rjmp	.+24     	; 0x734 <main+0x19c>
		
	} else if (buttonPress == BUTTON_C){		// RIGHT EVADE
     71c:	10 32       	cpi	r17, 0x20	; 32
     71e:	51 f4       	brne	.+20     	; 0x734 <main+0x19c>
		evasionEnableFlag = TRUE;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <evasionEnableFlag+0x1>
     728:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <evasionEnableFlag>
		evadeDirection = RIGHT;
     72c:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <evadeDirection+0x1>
     730:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <evadeDirection>
	
	
	
	// ==========================================================================================================================
	
	play_from_program_space(PSTR(">g32"));
     734:	81 e8       	ldi	r24, 0x81	; 129
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 c9 09 	call	0x1392	; 0x1392 <play_from_program_space>
	delay_ms(1000);
     73c:	88 ee       	ldi	r24, 0xE8	; 232
     73e:	93 e0       	ldi	r25, 0x03	; 3
     740:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
	play_from_program_space(PSTR(">g32"));
     744:	8c e7       	ldi	r24, 0x7C	; 124
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 c9 09 	call	0x1392	; 0x1392 <play_from_program_space>
	delay_ms(1000);
     74c:	88 ee       	ldi	r24, 0xE8	; 232
     74e:	93 e0       	ldi	r25, 0x03	; 3
     750:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
	play_from_program_space(PSTR(">g32"));
     754:	87 e7       	ldi	r24, 0x77	; 119
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 c9 09 	call	0x1392	; 0x1392 <play_from_program_space>
	delay_ms(1000);
     75c:	88 ee       	ldi	r24, 0xE8	; 232
     75e:	93 e0       	ldi	r25, 0x03	; 3
     760:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
	play_from_program_space(PSTR(">g32"));
     764:	82 e7       	ldi	r24, 0x72	; 114
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 c9 09 	call	0x1392	; 0x1392 <play_from_program_space>
	delay_ms(1000);
     76c:	88 ee       	ldi	r24, 0xE8	; 232
     76e:	93 e0       	ldi	r25, 0x03	; 3
     770:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
	play_from_program_space(PSTR(">g32"));
     774:	8d e6       	ldi	r24, 0x6D	; 109
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 c9 09 	call	0x1392	; 0x1392 <play_from_program_space>
	delay_ms(1000);
     77c:	88 ee       	ldi	r24, 0xE8	; 232
     77e:	93 e0       	ldi	r25, 0x03	; 3
     780:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
	play_from_program_space(PSTR(">g32"));
     784:	88 e6       	ldi	r24, 0x68	; 104
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 c9 09 	call	0x1392	; 0x1392 <play_from_program_space>
	
	// INTIAL BEHAVIOR ==========================================================================================================
	
	switch (behavior){
     78c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <behavior>
     790:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <behavior+0x1>
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	91 05       	cpc	r25, r1
     798:	81 f0       	breq	.+32     	; 0x7ba <main+0x222>
     79a:	83 30       	cpi	r24, 0x03	; 3
     79c:	91 05       	cpc	r25, r1
     79e:	c1 f0       	breq	.+48     	; 0x7d0 <main+0x238>
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	01 f5       	brne	.+64     	; 0x7e4 <main+0x24c>
		case 1:
			turnLeft(turnDelay, initSpeed);
     7a4:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <initSpeed>
     7a8:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <initSpeed+0x1>
     7ac:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <turnDelay>
     7b0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <turnDelay+0x1>
     7b4:	0e 94 2f 02 	call	0x45e	; 0x45e <turnLeft>
			break;
     7b8:	15 c0       	rjmp	.+42     	; 0x7e4 <main+0x24c>
		case 2:
			turnLeft(spinDelay, initSpeed);
     7ba:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <initSpeed>
     7be:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <initSpeed+0x1>
     7c2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <spinDelay>
     7c6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <spinDelay+0x1>
     7ca:	0e 94 2f 02 	call	0x45e	; 0x45e <turnLeft>
			break;
     7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <main+0x24c>
		case 3:
			turnRight(turnDelay, initSpeed);
     7d0:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <initSpeed>
     7d4:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <initSpeed+0x1>
     7d8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <turnDelay>
     7dc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <turnDelay+0x1>
     7e0:	0e 94 3e 02 	call	0x47c	; 0x47c <turnRight>
				// ============================================================================================1
			}
			
			if (timer >= 1000){
				updateCount = 0;
				timer = 0;
     7e4:	81 2c       	mov	r8, r1
     7e6:	91 2c       	mov	r9, r1
     7e8:	54 01       	movw	r10, r8
     7ea:	1a 8a       	std	Y+18, r1	; 0x12
     7ec:	1b 8a       	std	Y+19, r1	; 0x13
     7ee:	1c 8a       	std	Y+20, r1	; 0x14
     7f0:	1d 8a       	std	Y+21, r1	; 0x15
     7f2:	05 c0       	rjmp	.+10     	; 0x7fe <main+0x266>
     7f4:	81 2c       	mov	r8, r1
     7f6:	91 2c       	mov	r9, r1
     7f8:	54 01       	movw	r10, r8
     7fa:	73 01       	movw	r14, r6
     7fc:	62 01       	movw	r12, r4
	while(1)
	{
		// PUT PRIORITY FUNCTIONS THAT MUST RUN EVERY CYCLE IN HERE (I.E. BORDER CHECKING) ===================
		
		// FUNCTION WHEN OBJECT IS DETECTED ===================================================
		if (ping_ultrasound() < rammingDistance){
     7fe:	0e 94 00 01 	call	0x200	; 0x200 <ping_ultrasound>
     802:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <rammingDistance>
     806:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <rammingDistance+0x1>
     80a:	82 17       	cp	r24, r18
     80c:	93 07       	cpc	r25, r19
     80e:	bc f4       	brge	.+46     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
			if (evasionEnableFlag == TRUE){
     810:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <evasionEnableFlag>
     814:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <evasionEnableFlag+0x1>
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	39 f4       	brne	.+14     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
				evasionFlag = TRUE;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <evasionFlag+0x1>
     824:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <evasionFlag>
     828:	03 c0       	rjmp	.+6      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
			} else{
				fullSpeedAhead(rammingDistance);
     82a:	c9 01       	movw	r24, r18
     82c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <fullSpeedAhead>
			}
			
			isRamming = TRUE;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <isRamming+0x1>
     838:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <isRamming>
     83c:	59 c0       	rjmp	.+178    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
			
		} else{
			isRamming = FALSE;
     83e:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <isRamming+0x1>
     842:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <isRamming>
     846:	54 c0       	rjmp	.+168    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
		}
		// ====================================================================================
		
		// BORDER CHECKING ====================================================================
		while (check_border(sensorVals,sensorTimeOut) == 1){
			int speed = line_sensor_check(sensorVals,sensorTimeOut);
     848:	60 ed       	ldi	r22, 0xD0	; 208
     84a:	77 e0       	ldi	r23, 0x07	; 7
     84c:	ce 01       	movw	r24, r28
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	0e 94 81 00 	call	0x102	; 0x102 <line_sensor_check>
			
			evasionFlag = 0;
     854:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <evasionFlag+0x1>
     858:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <evasionFlag>
			evasionFrame = 0;
     85c:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <evasionFrame+0x1>
     860:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <evasionFrame>
			
			speed *= 13;
     864:	2d e0       	ldi	r18, 0x0D	; 13
     866:	28 9f       	mul	r18, r24
     868:	80 01       	movw	r16, r0
     86a:	29 9f       	mul	r18, r25
     86c:	10 0d       	add	r17, r0
     86e:	11 24       	eor	r1, r1
					
			if (speed > 255){
     870:	0f 3f       	cpi	r16, 0xFF	; 255
     872:	11 05       	cpc	r17, r1
     874:	19 f0       	breq	.+6      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     876:	14 f0       	brlt	.+4      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
				speed = 255;
     878:	0f ef       	ldi	r16, 0xFF	; 255
     87a:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (speed < -255){
     87c:	01 30       	cpi	r16, 0x01	; 1
     87e:	8f ef       	ldi	r24, 0xFF	; 255
     880:	18 07       	cpc	r17, r24
     882:	14 f4       	brge	.+4      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
				speed = -255;
     884:	01 e0       	ldi	r16, 0x01	; 1
     886:	1f ef       	ldi	r17, 0xFF	; 255
			}
			
			if (speed < 50 && speed > 0){
     888:	c8 01       	movw	r24, r16
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	c1 97       	sbiw	r24, 0x31	; 49
     88e:	10 f4       	brcc	.+4      	; 0x894 <__DATA_REGION_LENGTH__+0x94>
				speed = 50;
     890:	02 e3       	ldi	r16, 0x32	; 50
     892:	10 e0       	ldi	r17, 0x00	; 0
			}
			
			if (speed > -50 && speed < 0){
     894:	c8 01       	movw	r24, r16
     896:	c1 96       	adiw	r24, 0x31	; 49
     898:	c1 97       	sbiw	r24, 0x31	; 49
     89a:	10 f4       	brcc	.+4      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
				speed = -50;
     89c:	0e ec       	ldi	r16, 0xCE	; 206
     89e:	1f ef       	ldi	r17, 0xFF	; 255
			}
			
			if (speed < 0){
     8a0:	11 23       	and	r17, r17
     8a2:	64 f4       	brge	.+24     	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
				reverse(3, 255);
     8a4:	6f ef       	ldi	r22, 0xFF	; 255
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	83 e0       	ldi	r24, 0x03	; 3
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 1f 02 	call	0x43e	; 0x43e <reverse>
				turnRight(10, speed);
     8b0:	b8 01       	movw	r22, r16
     8b2:	8a e0       	ldi	r24, 0x0A	; 10
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 3e 02 	call	0x47c	; 0x47c <turnRight>
     8ba:	1a c0       	rjmp	.+52     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
			} else if (speed > 0){
     8bc:	10 16       	cp	r1, r16
     8be:	11 06       	cpc	r1, r17
     8c0:	7c f4       	brge	.+30     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
				reverse(3,255);
     8c2:	6f ef       	ldi	r22, 0xFF	; 255
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	83 e0       	ldi	r24, 0x03	; 3
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 1f 02 	call	0x43e	; 0x43e <reverse>
				turnLeft(10, -speed);
     8ce:	66 27       	eor	r22, r22
     8d0:	77 27       	eor	r23, r23
     8d2:	60 1b       	sub	r22, r16
     8d4:	71 0b       	sbc	r23, r17
     8d6:	8a e0       	ldi	r24, 0x0A	; 10
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 2f 02 	call	0x45e	; 0x45e <turnLeft>
     8de:	08 c0       	rjmp	.+16     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
			} else if (speed == 0){
     8e0:	01 2b       	or	r16, r17
     8e2:	31 f4       	brne	.+12     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
				set_motors(-255, -200);
     8e4:	68 e3       	ldi	r22, 0x38	; 56
     8e6:	7f ef       	ldi	r23, 0xFF	; 255
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	9f ef       	ldi	r25, 0xFF	; 255
     8ec:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <set_motors>
			isRamming = FALSE;
		}
		// ====================================================================================
		
		// BORDER CHECKING ====================================================================
		while (check_border(sensorVals,sensorTimeOut) == 1){
     8f0:	60 ed       	ldi	r22, 0xD0	; 208
     8f2:	77 e0       	ldi	r23, 0x07	; 7
     8f4:	ce 01       	movw	r24, r28
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <check_border>
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	09 f4       	brne	.+2      	; 0x902 <__stack+0x3>
     900:	a3 cf       	rjmp	.-186    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     902:	0e 94 42 0b 	call	0x1684	; 0x1684 <get_ms>
     906:	2b 01       	movw	r4, r22
     908:	3c 01       	movw	r6, r24
		
		
		// DELTA TIME LOOP FOR TIME BASED FUNCTIONS (I.E. MOVING FOR 5 SECONDS) ===============================1
		if (deltaLoopFlag == 1){
			currentTime = millis();
			delta += (currentTime - lastTime)/updateInterval;
     90a:	dc 01       	movw	r26, r24
     90c:	cb 01       	movw	r24, r22
     90e:	8c 19       	sub	r24, r12
     910:	9d 09       	sbc	r25, r13
     912:	ae 09       	sbc	r26, r14
     914:	bf 09       	sbc	r27, r15
     916:	6c 01       	movw	r12, r24
     918:	7d 01       	movw	r14, r26
     91a:	bc 01       	movw	r22, r24
     91c:	cd 01       	movw	r24, r26
     91e:	0e 94 91 05 	call	0xb22	; 0xb22 <__floatsisf>
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e8       	ldi	r20, 0x80	; 128
     928:	5d e3       	ldi	r21, 0x3D	; 61
     92a:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
     92e:	9b 01       	movw	r18, r22
     930:	ac 01       	movw	r20, r24
     932:	6a 89       	ldd	r22, Y+18	; 0x12
     934:	7b 89       	ldd	r23, Y+19	; 0x13
     936:	8c 89       	ldd	r24, Y+20	; 0x14
     938:	9d 89       	ldd	r25, Y+21	; 0x15
     93a:	0e 94 ed 04 	call	0x9da	; 0x9da <__addsf3>
     93e:	6a 8b       	std	Y+18, r22	; 0x12
     940:	7b 8b       	std	Y+19, r23	; 0x13
     942:	8c 8b       	std	Y+20, r24	; 0x14
     944:	9d 8b       	std	Y+21, r25	; 0x15
			timer += (currentTime - lastTime);
     946:	8c 0c       	add	r8, r12
     948:	9d 1c       	adc	r9, r13
     94a:	ae 1c       	adc	r10, r14
     94c:	bf 1c       	adc	r11, r15
			
			lastTime = currentTime;
			
			if (delta >= 1){
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e8       	ldi	r20, 0x80	; 128
     954:	5f e3       	ldi	r21, 0x3F	; 63
     956:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__gesf2>
     95a:	88 23       	and	r24, r24
     95c:	a4 f1       	brlt	.+104    	; 0x9c6 <__stack+0xc7>
				
				// PUT DELTA TIME BASED FUNCTIONS HERE ========================================================2
				
				if (evasionFlag == TRUE){
     95e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <evasionFlag>
     962:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <evasionFlag+0x1>
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	19 f4       	brne	.+6      	; 0x970 <__stack+0x71>
					evasionRoutine();
     96a:	0e 94 4e 02 	call	0x49c	; 0x49c <evasionRoutine>
     96e:	1d c0       	rjmp	.+58     	; 0x9aa <__stack+0xab>
						
				} else if(isRamming == TRUE){} 
     970:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <isRamming>
     974:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <isRamming+0x1>
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	b9 f0       	breq	.+46     	; 0x9aa <__stack+0xab>
					
				else {
					
					// PUT NORMAL SUMOBOT BEHAVIOR HERE ==================================================================================3
					
					evasionFrame = 0;
     97c:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <evasionFrame+0x1>
     980:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <evasionFrame>
					
					// SPIRALING ===============
					if (spiralEnableFlag == TRUE){
     984:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <spiralEnableFlag>
     988:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <spiralEnableFlag+0x1>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	39 f4       	brne	.+14     	; 0x99e <__stack+0x9f>
						spiralRoutine(spiralDirection);
     990:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <spiralDirection>
     994:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <spiralDirection+0x1>
     998:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spiralRoutine>
     99c:	06 c0       	rjmp	.+12     	; 0x9aa <__stack+0xab>
					} else {
						forward(0, 120);
     99e:	68 e7       	ldi	r22, 0x78	; 120
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 13 02 	call	0x426	; 0x426 <forward>
					
					// ==================================================================================================================3
				}
				
				// ============================================================================================2
				delta--;
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	40 e8       	ldi	r20, 0x80	; 128
     9b0:	5f e3       	ldi	r21, 0x3F	; 63
     9b2:	6a 89       	ldd	r22, Y+18	; 0x12
     9b4:	7b 89       	ldd	r23, Y+19	; 0x13
     9b6:	8c 89       	ldd	r24, Y+20	; 0x14
     9b8:	9d 89       	ldd	r25, Y+21	; 0x15
     9ba:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__subsf3>
     9be:	6a 8b       	std	Y+18, r22	; 0x12
     9c0:	7b 8b       	std	Y+19, r23	; 0x13
     9c2:	8c 8b       	std	Y+20, r24	; 0x14
     9c4:	9d 8b       	std	Y+21, r25	; 0x15
				updateCount++; 
				// ============================================================================================1
			}
			
			if (timer >= 1000){
     9c6:	98 ee       	ldi	r25, 0xE8	; 232
     9c8:	89 16       	cp	r8, r25
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	99 06       	cpc	r9, r25
     9ce:	a1 04       	cpc	r10, r1
     9d0:	b1 04       	cpc	r11, r1
     9d2:	0c f0       	brlt	.+2      	; 0x9d6 <__stack+0xd7>
     9d4:	0f cf       	rjmp	.-482    	; 0x7f4 <main+0x25c>
     9d6:	11 cf       	rjmp	.-478    	; 0x7fa <main+0x262>

000009d8 <__subsf3>:
     9d8:	50 58       	subi	r21, 0x80	; 128

000009da <__addsf3>:
     9da:	bb 27       	eor	r27, r27
     9dc:	aa 27       	eor	r26, r26
     9de:	0e 94 04 05 	call	0xa08	; 0xa08 <__addsf3x>
     9e2:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__fp_round>
     9e6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__fp_pscA>
     9ea:	38 f0       	brcs	.+14     	; 0x9fa <__addsf3+0x20>
     9ec:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_pscB>
     9f0:	20 f0       	brcs	.+8      	; 0x9fa <__addsf3+0x20>
     9f2:	39 f4       	brne	.+14     	; 0xa02 <__addsf3+0x28>
     9f4:	9f 3f       	cpi	r25, 0xFF	; 255
     9f6:	19 f4       	brne	.+6      	; 0x9fe <__addsf3+0x24>
     9f8:	26 f4       	brtc	.+8      	; 0xa02 <__addsf3+0x28>
     9fa:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__fp_nan>
     9fe:	0e f4       	brtc	.+2      	; 0xa02 <__addsf3+0x28>
     a00:	e0 95       	com	r30
     a02:	e7 fb       	bst	r30, 7
     a04:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_inf>

00000a08 <__addsf3x>:
     a08:	e9 2f       	mov	r30, r25
     a0a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__fp_split3>
     a0e:	58 f3       	brcs	.-42     	; 0x9e6 <__addsf3+0xc>
     a10:	ba 17       	cp	r27, r26
     a12:	62 07       	cpc	r22, r18
     a14:	73 07       	cpc	r23, r19
     a16:	84 07       	cpc	r24, r20
     a18:	95 07       	cpc	r25, r21
     a1a:	20 f0       	brcs	.+8      	; 0xa24 <__addsf3x+0x1c>
     a1c:	79 f4       	brne	.+30     	; 0xa3c <__addsf3x+0x34>
     a1e:	a6 f5       	brtc	.+104    	; 0xa88 <__addsf3x+0x80>
     a20:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_zero>
     a24:	0e f4       	brtc	.+2      	; 0xa28 <__addsf3x+0x20>
     a26:	e0 95       	com	r30
     a28:	0b 2e       	mov	r0, r27
     a2a:	ba 2f       	mov	r27, r26
     a2c:	a0 2d       	mov	r26, r0
     a2e:	0b 01       	movw	r0, r22
     a30:	b9 01       	movw	r22, r18
     a32:	90 01       	movw	r18, r0
     a34:	0c 01       	movw	r0, r24
     a36:	ca 01       	movw	r24, r20
     a38:	a0 01       	movw	r20, r0
     a3a:	11 24       	eor	r1, r1
     a3c:	ff 27       	eor	r31, r31
     a3e:	59 1b       	sub	r21, r25
     a40:	99 f0       	breq	.+38     	; 0xa68 <__addsf3x+0x60>
     a42:	59 3f       	cpi	r21, 0xF9	; 249
     a44:	50 f4       	brcc	.+20     	; 0xa5a <__addsf3x+0x52>
     a46:	50 3e       	cpi	r21, 0xE0	; 224
     a48:	68 f1       	brcs	.+90     	; 0xaa4 <__addsf3x+0x9c>
     a4a:	1a 16       	cp	r1, r26
     a4c:	f0 40       	sbci	r31, 0x00	; 0
     a4e:	a2 2f       	mov	r26, r18
     a50:	23 2f       	mov	r18, r19
     a52:	34 2f       	mov	r19, r20
     a54:	44 27       	eor	r20, r20
     a56:	58 5f       	subi	r21, 0xF8	; 248
     a58:	f3 cf       	rjmp	.-26     	; 0xa40 <__addsf3x+0x38>
     a5a:	46 95       	lsr	r20
     a5c:	37 95       	ror	r19
     a5e:	27 95       	ror	r18
     a60:	a7 95       	ror	r26
     a62:	f0 40       	sbci	r31, 0x00	; 0
     a64:	53 95       	inc	r21
     a66:	c9 f7       	brne	.-14     	; 0xa5a <__addsf3x+0x52>
     a68:	7e f4       	brtc	.+30     	; 0xa88 <__addsf3x+0x80>
     a6a:	1f 16       	cp	r1, r31
     a6c:	ba 0b       	sbc	r27, r26
     a6e:	62 0b       	sbc	r22, r18
     a70:	73 0b       	sbc	r23, r19
     a72:	84 0b       	sbc	r24, r20
     a74:	ba f0       	brmi	.+46     	; 0xaa4 <__addsf3x+0x9c>
     a76:	91 50       	subi	r25, 0x01	; 1
     a78:	a1 f0       	breq	.+40     	; 0xaa2 <__addsf3x+0x9a>
     a7a:	ff 0f       	add	r31, r31
     a7c:	bb 1f       	adc	r27, r27
     a7e:	66 1f       	adc	r22, r22
     a80:	77 1f       	adc	r23, r23
     a82:	88 1f       	adc	r24, r24
     a84:	c2 f7       	brpl	.-16     	; 0xa76 <__addsf3x+0x6e>
     a86:	0e c0       	rjmp	.+28     	; 0xaa4 <__addsf3x+0x9c>
     a88:	ba 0f       	add	r27, r26
     a8a:	62 1f       	adc	r22, r18
     a8c:	73 1f       	adc	r23, r19
     a8e:	84 1f       	adc	r24, r20
     a90:	48 f4       	brcc	.+18     	; 0xaa4 <__addsf3x+0x9c>
     a92:	87 95       	ror	r24
     a94:	77 95       	ror	r23
     a96:	67 95       	ror	r22
     a98:	b7 95       	ror	r27
     a9a:	f7 95       	ror	r31
     a9c:	9e 3f       	cpi	r25, 0xFE	; 254
     a9e:	08 f0       	brcs	.+2      	; 0xaa2 <__addsf3x+0x9a>
     aa0:	b0 cf       	rjmp	.-160    	; 0xa02 <__addsf3+0x28>
     aa2:	93 95       	inc	r25
     aa4:	88 0f       	add	r24, r24
     aa6:	08 f0       	brcs	.+2      	; 0xaaa <__addsf3x+0xa2>
     aa8:	99 27       	eor	r25, r25
     aaa:	ee 0f       	add	r30, r30
     aac:	97 95       	ror	r25
     aae:	87 95       	ror	r24
     ab0:	08 95       	ret

00000ab2 <__fixsfsi>:
     ab2:	0e 94 60 05 	call	0xac0	; 0xac0 <__fixunssfsi>
     ab6:	68 94       	set
     ab8:	b1 11       	cpse	r27, r1
     aba:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_szero>
     abe:	08 95       	ret

00000ac0 <__fixunssfsi>:
     ac0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__fp_splitA>
     ac4:	88 f0       	brcs	.+34     	; 0xae8 <__fixunssfsi+0x28>
     ac6:	9f 57       	subi	r25, 0x7F	; 127
     ac8:	98 f0       	brcs	.+38     	; 0xaf0 <__fixunssfsi+0x30>
     aca:	b9 2f       	mov	r27, r25
     acc:	99 27       	eor	r25, r25
     ace:	b7 51       	subi	r27, 0x17	; 23
     ad0:	b0 f0       	brcs	.+44     	; 0xafe <__fixunssfsi+0x3e>
     ad2:	e1 f0       	breq	.+56     	; 0xb0c <__fixunssfsi+0x4c>
     ad4:	66 0f       	add	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	88 1f       	adc	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	1a f0       	brmi	.+6      	; 0xae4 <__fixunssfsi+0x24>
     ade:	ba 95       	dec	r27
     ae0:	c9 f7       	brne	.-14     	; 0xad4 <__fixunssfsi+0x14>
     ae2:	14 c0       	rjmp	.+40     	; 0xb0c <__fixunssfsi+0x4c>
     ae4:	b1 30       	cpi	r27, 0x01	; 1
     ae6:	91 f0       	breq	.+36     	; 0xb0c <__fixunssfsi+0x4c>
     ae8:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_zero>
     aec:	b1 e0       	ldi	r27, 0x01	; 1
     aee:	08 95       	ret
     af0:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_zero>
     af4:	67 2f       	mov	r22, r23
     af6:	78 2f       	mov	r23, r24
     af8:	88 27       	eor	r24, r24
     afa:	b8 5f       	subi	r27, 0xF8	; 248
     afc:	39 f0       	breq	.+14     	; 0xb0c <__fixunssfsi+0x4c>
     afe:	b9 3f       	cpi	r27, 0xF9	; 249
     b00:	cc f3       	brlt	.-14     	; 0xaf4 <__fixunssfsi+0x34>
     b02:	86 95       	lsr	r24
     b04:	77 95       	ror	r23
     b06:	67 95       	ror	r22
     b08:	b3 95       	inc	r27
     b0a:	d9 f7       	brne	.-10     	; 0xb02 <__fixunssfsi+0x42>
     b0c:	3e f4       	brtc	.+14     	; 0xb1c <__fixunssfsi+0x5c>
     b0e:	90 95       	com	r25
     b10:	80 95       	com	r24
     b12:	70 95       	com	r23
     b14:	61 95       	neg	r22
     b16:	7f 4f       	sbci	r23, 0xFF	; 255
     b18:	8f 4f       	sbci	r24, 0xFF	; 255
     b1a:	9f 4f       	sbci	r25, 0xFF	; 255
     b1c:	08 95       	ret

00000b1e <__floatunsisf>:
     b1e:	e8 94       	clt
     b20:	09 c0       	rjmp	.+18     	; 0xb34 <__floatsisf+0x12>

00000b22 <__floatsisf>:
     b22:	97 fb       	bst	r25, 7
     b24:	3e f4       	brtc	.+14     	; 0xb34 <__floatsisf+0x12>
     b26:	90 95       	com	r25
     b28:	80 95       	com	r24
     b2a:	70 95       	com	r23
     b2c:	61 95       	neg	r22
     b2e:	7f 4f       	sbci	r23, 0xFF	; 255
     b30:	8f 4f       	sbci	r24, 0xFF	; 255
     b32:	9f 4f       	sbci	r25, 0xFF	; 255
     b34:	99 23       	and	r25, r25
     b36:	a9 f0       	breq	.+42     	; 0xb62 <__floatsisf+0x40>
     b38:	f9 2f       	mov	r31, r25
     b3a:	96 e9       	ldi	r25, 0x96	; 150
     b3c:	bb 27       	eor	r27, r27
     b3e:	93 95       	inc	r25
     b40:	f6 95       	lsr	r31
     b42:	87 95       	ror	r24
     b44:	77 95       	ror	r23
     b46:	67 95       	ror	r22
     b48:	b7 95       	ror	r27
     b4a:	f1 11       	cpse	r31, r1
     b4c:	f8 cf       	rjmp	.-16     	; 0xb3e <__floatsisf+0x1c>
     b4e:	fa f4       	brpl	.+62     	; 0xb8e <__floatsisf+0x6c>
     b50:	bb 0f       	add	r27, r27
     b52:	11 f4       	brne	.+4      	; 0xb58 <__floatsisf+0x36>
     b54:	60 ff       	sbrs	r22, 0
     b56:	1b c0       	rjmp	.+54     	; 0xb8e <__floatsisf+0x6c>
     b58:	6f 5f       	subi	r22, 0xFF	; 255
     b5a:	7f 4f       	sbci	r23, 0xFF	; 255
     b5c:	8f 4f       	sbci	r24, 0xFF	; 255
     b5e:	9f 4f       	sbci	r25, 0xFF	; 255
     b60:	16 c0       	rjmp	.+44     	; 0xb8e <__floatsisf+0x6c>
     b62:	88 23       	and	r24, r24
     b64:	11 f0       	breq	.+4      	; 0xb6a <__floatsisf+0x48>
     b66:	96 e9       	ldi	r25, 0x96	; 150
     b68:	11 c0       	rjmp	.+34     	; 0xb8c <__floatsisf+0x6a>
     b6a:	77 23       	and	r23, r23
     b6c:	21 f0       	breq	.+8      	; 0xb76 <__floatsisf+0x54>
     b6e:	9e e8       	ldi	r25, 0x8E	; 142
     b70:	87 2f       	mov	r24, r23
     b72:	76 2f       	mov	r23, r22
     b74:	05 c0       	rjmp	.+10     	; 0xb80 <__floatsisf+0x5e>
     b76:	66 23       	and	r22, r22
     b78:	71 f0       	breq	.+28     	; 0xb96 <__floatsisf+0x74>
     b7a:	96 e8       	ldi	r25, 0x86	; 134
     b7c:	86 2f       	mov	r24, r22
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	2a f0       	brmi	.+10     	; 0xb8e <__floatsisf+0x6c>
     b84:	9a 95       	dec	r25
     b86:	66 0f       	add	r22, r22
     b88:	77 1f       	adc	r23, r23
     b8a:	88 1f       	adc	r24, r24
     b8c:	da f7       	brpl	.-10     	; 0xb84 <__floatsisf+0x62>
     b8e:	88 0f       	add	r24, r24
     b90:	96 95       	lsr	r25
     b92:	87 95       	ror	r24
     b94:	97 f9       	bld	r25, 7
     b96:	08 95       	ret

00000b98 <__fp_inf>:
     b98:	97 f9       	bld	r25, 7
     b9a:	9f 67       	ori	r25, 0x7F	; 127
     b9c:	80 e8       	ldi	r24, 0x80	; 128
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	08 95       	ret

00000ba4 <__fp_nan>:
     ba4:	9f ef       	ldi	r25, 0xFF	; 255
     ba6:	80 ec       	ldi	r24, 0xC0	; 192
     ba8:	08 95       	ret

00000baa <__fp_pscA>:
     baa:	00 24       	eor	r0, r0
     bac:	0a 94       	dec	r0
     bae:	16 16       	cp	r1, r22
     bb0:	17 06       	cpc	r1, r23
     bb2:	18 06       	cpc	r1, r24
     bb4:	09 06       	cpc	r0, r25
     bb6:	08 95       	ret

00000bb8 <__fp_pscB>:
     bb8:	00 24       	eor	r0, r0
     bba:	0a 94       	dec	r0
     bbc:	12 16       	cp	r1, r18
     bbe:	13 06       	cpc	r1, r19
     bc0:	14 06       	cpc	r1, r20
     bc2:	05 06       	cpc	r0, r21
     bc4:	08 95       	ret

00000bc6 <__fp_round>:
     bc6:	09 2e       	mov	r0, r25
     bc8:	03 94       	inc	r0
     bca:	00 0c       	add	r0, r0
     bcc:	11 f4       	brne	.+4      	; 0xbd2 <__fp_round+0xc>
     bce:	88 23       	and	r24, r24
     bd0:	52 f0       	brmi	.+20     	; 0xbe6 <__fp_round+0x20>
     bd2:	bb 0f       	add	r27, r27
     bd4:	40 f4       	brcc	.+16     	; 0xbe6 <__fp_round+0x20>
     bd6:	bf 2b       	or	r27, r31
     bd8:	11 f4       	brne	.+4      	; 0xbde <__fp_round+0x18>
     bda:	60 ff       	sbrs	r22, 0
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <__fp_round+0x20>
     bde:	6f 5f       	subi	r22, 0xFF	; 255
     be0:	7f 4f       	sbci	r23, 0xFF	; 255
     be2:	8f 4f       	sbci	r24, 0xFF	; 255
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	08 95       	ret

00000be8 <__fp_split3>:
     be8:	57 fd       	sbrc	r21, 7
     bea:	90 58       	subi	r25, 0x80	; 128
     bec:	44 0f       	add	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	59 f0       	breq	.+22     	; 0xc08 <__fp_splitA+0x10>
     bf2:	5f 3f       	cpi	r21, 0xFF	; 255
     bf4:	71 f0       	breq	.+28     	; 0xc12 <__fp_splitA+0x1a>
     bf6:	47 95       	ror	r20

00000bf8 <__fp_splitA>:
     bf8:	88 0f       	add	r24, r24
     bfa:	97 fb       	bst	r25, 7
     bfc:	99 1f       	adc	r25, r25
     bfe:	61 f0       	breq	.+24     	; 0xc18 <__fp_splitA+0x20>
     c00:	9f 3f       	cpi	r25, 0xFF	; 255
     c02:	79 f0       	breq	.+30     	; 0xc22 <__fp_splitA+0x2a>
     c04:	87 95       	ror	r24
     c06:	08 95       	ret
     c08:	12 16       	cp	r1, r18
     c0a:	13 06       	cpc	r1, r19
     c0c:	14 06       	cpc	r1, r20
     c0e:	55 1f       	adc	r21, r21
     c10:	f2 cf       	rjmp	.-28     	; 0xbf6 <__fp_split3+0xe>
     c12:	46 95       	lsr	r20
     c14:	f1 df       	rcall	.-30     	; 0xbf8 <__fp_splitA>
     c16:	08 c0       	rjmp	.+16     	; 0xc28 <__fp_splitA+0x30>
     c18:	16 16       	cp	r1, r22
     c1a:	17 06       	cpc	r1, r23
     c1c:	18 06       	cpc	r1, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	f1 cf       	rjmp	.-30     	; 0xc04 <__fp_splitA+0xc>
     c22:	86 95       	lsr	r24
     c24:	71 05       	cpc	r23, r1
     c26:	61 05       	cpc	r22, r1
     c28:	08 94       	sec
     c2a:	08 95       	ret

00000c2c <__fp_zero>:
     c2c:	e8 94       	clt

00000c2e <__fp_szero>:
     c2e:	bb 27       	eor	r27, r27
     c30:	66 27       	eor	r22, r22
     c32:	77 27       	eor	r23, r23
     c34:	cb 01       	movw	r24, r22
     c36:	97 f9       	bld	r25, 7
     c38:	08 95       	ret

00000c3a <__gesf2>:
     c3a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fp_cmp>
     c3e:	08 f4       	brcc	.+2      	; 0xc42 <__gesf2+0x8>
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	08 95       	ret

00000c44 <__mulsf3>:
     c44:	0e 94 35 06 	call	0xc6a	; 0xc6a <__mulsf3x>
     c48:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__fp_round>
     c4c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__fp_pscA>
     c50:	38 f0       	brcs	.+14     	; 0xc60 <__mulsf3+0x1c>
     c52:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_pscB>
     c56:	20 f0       	brcs	.+8      	; 0xc60 <__mulsf3+0x1c>
     c58:	95 23       	and	r25, r21
     c5a:	11 f0       	breq	.+4      	; 0xc60 <__mulsf3+0x1c>
     c5c:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_inf>
     c60:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__fp_nan>
     c64:	11 24       	eor	r1, r1
     c66:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_szero>

00000c6a <__mulsf3x>:
     c6a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__fp_split3>
     c6e:	70 f3       	brcs	.-36     	; 0xc4c <__mulsf3+0x8>

00000c70 <__mulsf3_pse>:
     c70:	95 9f       	mul	r25, r21
     c72:	c1 f3       	breq	.-16     	; 0xc64 <__mulsf3+0x20>
     c74:	95 0f       	add	r25, r21
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	55 1f       	adc	r21, r21
     c7a:	62 9f       	mul	r22, r18
     c7c:	f0 01       	movw	r30, r0
     c7e:	72 9f       	mul	r23, r18
     c80:	bb 27       	eor	r27, r27
     c82:	f0 0d       	add	r31, r0
     c84:	b1 1d       	adc	r27, r1
     c86:	63 9f       	mul	r22, r19
     c88:	aa 27       	eor	r26, r26
     c8a:	f0 0d       	add	r31, r0
     c8c:	b1 1d       	adc	r27, r1
     c8e:	aa 1f       	adc	r26, r26
     c90:	64 9f       	mul	r22, r20
     c92:	66 27       	eor	r22, r22
     c94:	b0 0d       	add	r27, r0
     c96:	a1 1d       	adc	r26, r1
     c98:	66 1f       	adc	r22, r22
     c9a:	82 9f       	mul	r24, r18
     c9c:	22 27       	eor	r18, r18
     c9e:	b0 0d       	add	r27, r0
     ca0:	a1 1d       	adc	r26, r1
     ca2:	62 1f       	adc	r22, r18
     ca4:	73 9f       	mul	r23, r19
     ca6:	b0 0d       	add	r27, r0
     ca8:	a1 1d       	adc	r26, r1
     caa:	62 1f       	adc	r22, r18
     cac:	83 9f       	mul	r24, r19
     cae:	a0 0d       	add	r26, r0
     cb0:	61 1d       	adc	r22, r1
     cb2:	22 1f       	adc	r18, r18
     cb4:	74 9f       	mul	r23, r20
     cb6:	33 27       	eor	r19, r19
     cb8:	a0 0d       	add	r26, r0
     cba:	61 1d       	adc	r22, r1
     cbc:	23 1f       	adc	r18, r19
     cbe:	84 9f       	mul	r24, r20
     cc0:	60 0d       	add	r22, r0
     cc2:	21 1d       	adc	r18, r1
     cc4:	82 2f       	mov	r24, r18
     cc6:	76 2f       	mov	r23, r22
     cc8:	6a 2f       	mov	r22, r26
     cca:	11 24       	eor	r1, r1
     ccc:	9f 57       	subi	r25, 0x7F	; 127
     cce:	50 40       	sbci	r21, 0x00	; 0
     cd0:	9a f0       	brmi	.+38     	; 0xcf8 <__mulsf3_pse+0x88>
     cd2:	f1 f0       	breq	.+60     	; 0xd10 <__mulsf3_pse+0xa0>
     cd4:	88 23       	and	r24, r24
     cd6:	4a f0       	brmi	.+18     	; 0xcea <__mulsf3_pse+0x7a>
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	bb 1f       	adc	r27, r27
     cde:	66 1f       	adc	r22, r22
     ce0:	77 1f       	adc	r23, r23
     ce2:	88 1f       	adc	r24, r24
     ce4:	91 50       	subi	r25, 0x01	; 1
     ce6:	50 40       	sbci	r21, 0x00	; 0
     ce8:	a9 f7       	brne	.-22     	; 0xcd4 <__mulsf3_pse+0x64>
     cea:	9e 3f       	cpi	r25, 0xFE	; 254
     cec:	51 05       	cpc	r21, r1
     cee:	80 f0       	brcs	.+32     	; 0xd10 <__mulsf3_pse+0xa0>
     cf0:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_inf>
     cf4:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_szero>
     cf8:	5f 3f       	cpi	r21, 0xFF	; 255
     cfa:	e4 f3       	brlt	.-8      	; 0xcf4 <__mulsf3_pse+0x84>
     cfc:	98 3e       	cpi	r25, 0xE8	; 232
     cfe:	d4 f3       	brlt	.-12     	; 0xcf4 <__mulsf3_pse+0x84>
     d00:	86 95       	lsr	r24
     d02:	77 95       	ror	r23
     d04:	67 95       	ror	r22
     d06:	b7 95       	ror	r27
     d08:	f7 95       	ror	r31
     d0a:	e7 95       	ror	r30
     d0c:	9f 5f       	subi	r25, 0xFF	; 255
     d0e:	c1 f7       	brne	.-16     	; 0xd00 <__mulsf3_pse+0x90>
     d10:	fe 2b       	or	r31, r30
     d12:	88 0f       	add	r24, r24
     d14:	91 1d       	adc	r25, r1
     d16:	96 95       	lsr	r25
     d18:	87 95       	ror	r24
     d1a:	97 f9       	bld	r25, 7
     d1c:	08 95       	ret

00000d1e <__fp_cmp>:
     d1e:	99 0f       	add	r25, r25
     d20:	00 08       	sbc	r0, r0
     d22:	55 0f       	add	r21, r21
     d24:	aa 0b       	sbc	r26, r26
     d26:	e0 e8       	ldi	r30, 0x80	; 128
     d28:	fe ef       	ldi	r31, 0xFE	; 254
     d2a:	16 16       	cp	r1, r22
     d2c:	17 06       	cpc	r1, r23
     d2e:	e8 07       	cpc	r30, r24
     d30:	f9 07       	cpc	r31, r25
     d32:	c0 f0       	brcs	.+48     	; 0xd64 <__fp_cmp+0x46>
     d34:	12 16       	cp	r1, r18
     d36:	13 06       	cpc	r1, r19
     d38:	e4 07       	cpc	r30, r20
     d3a:	f5 07       	cpc	r31, r21
     d3c:	98 f0       	brcs	.+38     	; 0xd64 <__fp_cmp+0x46>
     d3e:	62 1b       	sub	r22, r18
     d40:	73 0b       	sbc	r23, r19
     d42:	84 0b       	sbc	r24, r20
     d44:	95 0b       	sbc	r25, r21
     d46:	39 f4       	brne	.+14     	; 0xd56 <__fp_cmp+0x38>
     d48:	0a 26       	eor	r0, r26
     d4a:	61 f0       	breq	.+24     	; 0xd64 <__fp_cmp+0x46>
     d4c:	23 2b       	or	r18, r19
     d4e:	24 2b       	or	r18, r20
     d50:	25 2b       	or	r18, r21
     d52:	21 f4       	brne	.+8      	; 0xd5c <__fp_cmp+0x3e>
     d54:	08 95       	ret
     d56:	0a 26       	eor	r0, r26
     d58:	09 f4       	brne	.+2      	; 0xd5c <__fp_cmp+0x3e>
     d5a:	a1 40       	sbci	r26, 0x01	; 1
     d5c:	a6 95       	lsr	r26
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	81 1d       	adc	r24, r1
     d62:	81 1d       	adc	r24, r1
     d64:	08 95       	ret

00000d66 <_ZL16currentCharacterv>:
     d66:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <_ZL17use_program_space>
     d6a:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__data_end>
     d6e:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__data_end+0x1>
     d72:	99 23       	and	r25, r25
     d74:	11 f0       	breq	.+4      	; 0xd7a <_ZL16currentCharacterv+0x14>
     d76:	84 91       	lpm	r24, Z
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <_ZL16currentCharacterv+0x16>
     d7a:	80 81       	ld	r24, Z
     d7c:	2f eb       	ldi	r18, 0xBF	; 191
     d7e:	28 0f       	add	r18, r24
     d80:	2a 31       	cpi	r18, 0x1A	; 26
     d82:	10 f4       	brcc	.+4      	; 0xd88 <_ZL16currentCharacterv+0x22>
     d84:	80 5e       	subi	r24, 0xE0	; 224
     d86:	08 95       	ret
     d88:	80 32       	cpi	r24, 0x20	; 32
     d8a:	49 f4       	brne	.+18     	; 0xd9e <_ZL16currentCharacterv+0x38>
     d8c:	9f 01       	movw	r18, r30
     d8e:	2f 5f       	subi	r18, 0xFF	; 255
     d90:	3f 4f       	sbci	r19, 0xFF	; 255
     d92:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__data_end+0x1>
     d96:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__data_end>
     d9a:	ef 2b       	or	r30, r31
     d9c:	31 f7       	brne	.-52     	; 0xd6a <_ZL16currentCharacterv+0x4>
     d9e:	08 95       	ret

00000da0 <_ZL9getNumberv>:
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZL16currentCharacterv>
     daa:	c0 e0       	ldi	r28, 0x00	; 0
     dac:	d0 e0       	ldi	r29, 0x00	; 0
     dae:	1a e0       	ldi	r17, 0x0A	; 10
     db0:	90 ed       	ldi	r25, 0xD0	; 208
     db2:	98 0f       	add	r25, r24
     db4:	9a 30       	cpi	r25, 0x0A	; 10
     db6:	b8 f4       	brcc	.+46     	; 0xde6 <_ZL9getNumberv+0x46>
     db8:	9e 01       	movw	r18, r28
     dba:	12 9f       	mul	r17, r18
     dbc:	e0 01       	movw	r28, r0
     dbe:	13 9f       	mul	r17, r19
     dc0:	d0 0d       	add	r29, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	c8 0f       	add	r28, r24
     dc6:	d1 1d       	adc	r29, r1
     dc8:	87 fd       	sbrc	r24, 7
     dca:	da 95       	dec	r29
     dcc:	e0 97       	sbiw	r28, 0x30	; 48
     dce:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     dd2:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x1>
     ddc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
     de0:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZL16currentCharacterv>
     de4:	e5 cf       	rjmp	.-54     	; 0xdb0 <_ZL9getNumberv+0x10>
     de6:	ce 01       	movw	r24, r28
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	08 95       	ret

00000df0 <_ZN15OrangutanBuzzer5init2Ev>:
     df0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     df4:	83 e2       	ldi	r24, 0x23	; 35
     df6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     dfa:	81 e1       	ldi	r24, 0x11	; 17
     dfc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e00:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
     e04:	80 e1       	ldi	r24, 0x10	; 16
     e06:	97 e2       	ldi	r25, 0x27	; 39
     e08:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     e0c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     e10:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     e14:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     e18:	22 9a       	sbi	0x04, 2	; 4
     e1a:	78 94       	sei
     e1c:	08 95       	ret

00000e1e <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     e1e:	8f 92       	push	r8
     e20:	9f 92       	push	r9
     e22:	af 92       	push	r10
     e24:	bf 92       	push	r11
     e26:	df 92       	push	r13
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	5c 01       	movw	r10, r24
     e36:	8b 01       	movw	r16, r22
     e38:	d4 2e       	mov	r13, r20
     e3a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <buzzerInitialized>
     e3e:	81 11       	cpse	r24, r1
     e40:	05 c0       	rjmp	.+10     	; 0xe4c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <buzzerInitialized>
     e48:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN15OrangutanBuzzer5init2Ev>
     e4c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <buzzerFinished>
     e50:	b7 fe       	sbrs	r11, 7
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
     e54:	e8 94       	clt
     e56:	b7 f8       	bld	r11, 7
     e58:	2a e0       	ldi	r18, 0x0A	; 10
     e5a:	f2 2e       	mov	r15, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
     e5e:	ff 24       	eor	r15, r15
     e60:	f3 94       	inc	r15
     e62:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e66:	2e 2d       	mov	r18, r14
     e68:	28 7f       	andi	r18, 0xF8	; 248
     e6a:	e2 2e       	mov	r14, r18
     e6c:	48 ec       	ldi	r20, 0xC8	; 200
     e6e:	f4 9e       	mul	r15, r20
     e70:	c0 01       	movw	r24, r0
     e72:	11 24       	eor	r1, r1
     e74:	8a 15       	cp	r24, r10
     e76:	9b 05       	cpc	r25, r11
     e78:	e0 f4       	brcc	.+56     	; 0xeb2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
     e7a:	e5 01       	movw	r28, r10
     e7c:	51 e1       	ldi	r21, 0x11	; 17
     e7e:	a5 16       	cp	r10, r21
     e80:	57 e2       	ldi	r21, 0x27	; 39
     e82:	b5 06       	cpc	r11, r21
     e84:	10 f0       	brcs	.+4      	; 0xe8a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
     e86:	c0 e1       	ldi	r28, 0x10	; 16
     e88:	d7 e2       	ldi	r29, 0x27	; 39
     e8a:	be 01       	movw	r22, r28
     e8c:	76 95       	lsr	r23
     e8e:	67 95       	ror	r22
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	60 58       	subi	r22, 0x80	; 128
     e96:	79 46       	sbci	r23, 0x69	; 105
     e98:	87 46       	sbci	r24, 0x67	; 103
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	4e 01       	movw	r8, r28
     e9e:	a1 2c       	mov	r10, r1
     ea0:	b1 2c       	mov	r11, r1
     ea2:	a5 01       	movw	r20, r10
     ea4:	94 01       	movw	r18, r8
     ea6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__udivmodsi4>
     eaa:	59 01       	movw	r10, r18
     eac:	8e 2d       	mov	r24, r14
     eae:	81 60       	ori	r24, 0x01	; 1
     eb0:	24 c0       	rjmp	.+72     	; 0xefa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
     eb2:	c8 e2       	ldi	r28, 0x28	; 40
     eb4:	fc 9e       	mul	r15, r28
     eb6:	c0 2d       	mov	r28, r0
     eb8:	11 24       	eor	r1, r1
     eba:	d0 e0       	ldi	r29, 0x00	; 0
     ebc:	ca 15       	cp	r28, r10
     ebe:	db 05       	cpc	r29, r11
     ec0:	08 f4       	brcc	.+2      	; 0xec4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
     ec2:	e5 01       	movw	r28, r10
     ec4:	be 01       	movw	r22, r28
     ec6:	76 95       	lsr	r23
     ec8:	67 95       	ror	r22
     eca:	9e 01       	movw	r18, r28
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	8a e0       	ldi	r24, 0x0A	; 10
     ed2:	f8 12       	cpse	r15, r24
     ed4:	07 c0       	rjmp	.+14     	; 0xee4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	60 5e       	subi	r22, 0xE0	; 224
     edc:	73 44       	sbci	r23, 0x43	; 67
     ede:	81 44       	sbci	r24, 0x41	; 65
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	06 c0       	rjmp	.+12     	; 0xef0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	60 53       	subi	r22, 0x30	; 48
     eea:	7d 4e       	sbci	r23, 0xED	; 237
     eec:	8c 4e       	sbci	r24, 0xEC	; 236
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__udivmodsi4>
     ef4:	59 01       	movw	r10, r18
     ef6:	8e 2d       	mov	r24, r14
     ef8:	82 60       	ori	r24, 0x02	; 2
     efa:	88 2e       	mov	r8, r24
     efc:	2a e0       	ldi	r18, 0x0A	; 10
     efe:	f2 12       	cpse	r15, r18
     f00:	07 c0       	rjmp	.+14     	; 0xf10 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
     f02:	ce 01       	movw	r24, r28
     f04:	05 96       	adiw	r24, 0x05	; 5
     f06:	6a e0       	ldi	r22, 0x0A	; 10
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__udivmodhi4>
     f0e:	eb 01       	movw	r28, r22
     f10:	c8 3e       	cpi	r28, 0xE8	; 232
     f12:	43 e0       	ldi	r20, 0x03	; 3
     f14:	d4 07       	cpc	r29, r20
     f16:	59 f0       	breq	.+22     	; 0xf2e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
     f18:	98 01       	movw	r18, r16
     f1a:	de 01       	movw	r26, r28
     f1c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__umulhisi3>
     f20:	28 ee       	ldi	r18, 0xE8	; 232
     f22:	33 e0       	ldi	r19, 0x03	; 3
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__divmodsi4>
     f2c:	89 01       	movw	r16, r18
     f2e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     f32:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     f36:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     f3a:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     f3e:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     f42:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     f46:	4d 2d       	mov	r20, r13
     f48:	40 31       	cpi	r20, 0x10	; 16
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
     f4c:	4f e0       	ldi	r20, 0x0F	; 15
     f4e:	80 e1       	ldi	r24, 0x10	; 16
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	84 1b       	sub	r24, r20
     f54:	91 09       	sbc	r25, r1
     f56:	a9 01       	movw	r20, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
     f5a:	56 95       	lsr	r21
     f5c:	47 95       	ror	r20
     f5e:	8a 95       	dec	r24
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
     f62:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     f66:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     f6a:	10 93 4a 01 	sts	0x014A, r17	; 0x80014a <_ZL13buzzerTimeout+0x1>
     f6e:	00 93 49 01 	sts	0x0149, r16	; 0x800149 <_ZL13buzzerTimeout>
     f72:	86 b3       	in	r24, 0x16	; 22
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	86 bb       	out	0x16, r24	; 22
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	df 90       	pop	r13
     f8c:	bf 90       	pop	r11
     f8e:	af 90       	pop	r10
     f90:	9f 90       	pop	r9
     f92:	8f 90       	pop	r8
     f94:	08 95       	ret

00000f96 <_ZN15OrangutanBuzzer8playNoteEhjh>:
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	eb 01       	movw	r28, r22
     f9c:	8f 3f       	cpi	r24, 0xFF	; 255
     f9e:	11 f0       	breq	.+4      	; 0xfa4 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
     fa0:	41 11       	cpse	r20, r1
     fa2:	05 c0       	rjmp	.+10     	; 0xfae <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	be 01       	movw	r22, r28
     fa8:	88 ee       	ldi	r24, 0xE8	; 232
     faa:	93 e0       	ldi	r25, 0x03	; 3
     fac:	43 c0       	rjmp	.+134    	; 0x1034 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
     fae:	81 31       	cpi	r24, 0x11	; 17
     fb0:	30 f0       	brcs	.+12     	; 0xfbe <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
     fb2:	50 ef       	ldi	r21, 0xF0	; 240
     fb4:	58 0f       	add	r21, r24
     fb6:	50 36       	cpi	r21, 0x60	; 96
     fb8:	18 f0       	brcs	.+6      	; 0xfc0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     fba:	5f e5       	ldi	r21, 0x5F	; 95
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	85 2f       	mov	r24, r21
     fc2:	6c e0       	ldi	r22, 0x0C	; 12
     fc4:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__udivmodqi4>
     fc8:	68 2f       	mov	r22, r24
     fca:	74 ef       	ldi	r23, 0xF4	; 244
     fcc:	76 03       	mulsu	r23, r22
     fce:	90 01       	movw	r18, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	25 0f       	add	r18, r21
     fd4:	31 1d       	adc	r19, r1
     fd6:	2c 30       	cpi	r18, 0x0C	; 12
     fd8:	31 05       	cpc	r19, r1
     fda:	40 f4       	brcc	.+16     	; 0xfec <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
     fdc:	f9 01       	movw	r30, r18
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	ec 5d       	subi	r30, 0xDC	; 220
     fe4:	fe 4f       	sbci	r31, 0xFE	; 254
     fe6:	20 81       	ld	r18, Z
     fe8:	31 81       	ldd	r19, Z+1	; 0x01
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	87 30       	cpi	r24, 0x07	; 7
     ff2:	81 f0       	breq	.+32     	; 0x1014 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
     ff4:	08 2e       	mov	r0, r24
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1000:	82 30       	cpi	r24, 0x02	; 2
    1002:	28 f0       	brcs	.+10     	; 0x100e <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1004:	c9 01       	movw	r24, r18
    1006:	05 96       	adiw	r24, 0x05	; 5
    1008:	6a e0       	ldi	r22, 0x0A	; 10
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	0c c0       	rjmp	.+24     	; 0x1026 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    100e:	c9 01       	movw	r24, r18
    1010:	90 58       	subi	r25, 0x80	; 128
    1012:	0c c0       	rjmp	.+24     	; 0x102c <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1014:	c9 01       	movw	r24, r18
    1016:	36 e0       	ldi	r19, 0x06	; 6
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	3a 95       	dec	r19
    101e:	e1 f7       	brne	.-8      	; 0x1018 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1020:	02 96       	adiw	r24, 0x02	; 2
    1022:	65 e0       	ldi	r22, 0x05	; 5
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__udivmodhi4>
    102a:	cb 01       	movw	r24, r22
    102c:	40 31       	cpi	r20, 0x10	; 16
    102e:	08 f0       	brcs	.+2      	; 0x1032 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1030:	4f e0       	ldi	r20, 0x0F	; 15
    1032:	be 01       	movw	r22, r28
    1034:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <_ZL8nextNotev>:
    103e:	a2 e0       	ldi	r26, 0x02	; 2
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e2       	ldi	r30, 0x25	; 37
    1044:	f8 e0       	ldi	r31, 0x08	; 8
    1046:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__prologue_saves__+0x4>
    104a:	90 90 08 01 	lds	r9, 0x0108	; 0x800108 <_ZL6octave>
    104e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <_ZL8staccato>
    1052:	88 23       	and	r24, r24
    1054:	21 f0       	breq	.+8      	; 0x105e <_ZL8nextNotev+0x20>
    1056:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <_ZL22staccato_rest_duration>
    105a:	61 11       	cpse	r22, r1
    105c:	17 c0       	rjmp	.+46     	; 0x108c <_ZL8nextNotev+0x4e>
    105e:	77 24       	eor	r7, r7
    1060:	73 94       	inc	r7
    1062:	b0 ec       	ldi	r27, 0xC0	; 192
    1064:	ab 2e       	mov	r10, r27
    1066:	bd e5       	ldi	r27, 0x5D	; 93
    1068:	bb 2e       	mov	r11, r27
    106a:	1a e0       	ldi	r17, 0x0A	; 10
    106c:	61 2e       	mov	r6, r17
    106e:	04 e0       	ldi	r16, 0x04	; 4
    1070:	80 2e       	mov	r8, r16
    1072:	80 ed       	ldi	r24, 0xD0	; 208
    1074:	c8 2e       	mov	r12, r24
    1076:	87 e0       	ldi	r24, 0x07	; 7
    1078:	d8 2e       	mov	r13, r24
    107a:	94 e0       	ldi	r25, 0x04	; 4
    107c:	e9 2e       	mov	r14, r25
    107e:	f1 2c       	mov	r15, r1
    1080:	04 ef       	ldi	r16, 0xF4	; 244
    1082:	11 e0       	ldi	r17, 0x01	; 1
    1084:	2f e0       	ldi	r18, 0x0F	; 15
    1086:	42 2e       	mov	r4, r18
    1088:	51 2c       	mov	r5, r1
    108a:	15 c0       	rjmp	.+42     	; 0x10b6 <_ZL8nextNotev+0x78>
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	88 ee       	ldi	r24, 0xE8	; 232
    1092:	93 e0       	ldi	r25, 0x03	; 3
    1094:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1098:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <_ZL22staccato_rest_duration>
    109c:	17 c1       	rjmp	.+558    	; 0x12cc <_ZL8nextNotev+0x28e>
    109e:	86 36       	cpi	r24, 0x66	; 102
    10a0:	d4 f5       	brge	.+116    	; 0x1116 <_ZL8nextNotev+0xd8>
    10a2:	81 36       	cpi	r24, 0x61	; 97
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <_ZL8nextNotev+0x6a>
    10a6:	a9 c0       	rjmp	.+338    	; 0x11fa <_ZL8nextNotev+0x1bc>
    10a8:	7c f5       	brge	.+94     	; 0x1108 <_ZL8nextNotev+0xca>
    10aa:	8c 33       	cpi	r24, 0x3C	; 60
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <_ZL8nextNotev+0x72>
    10ae:	60 c0       	rjmp	.+192    	; 0x1170 <_ZL8nextNotev+0x132>
    10b0:	8e 33       	cpi	r24, 0x3E	; 62
    10b2:	81 f4       	brne	.+32     	; 0x10d4 <_ZL8nextNotev+0x96>
    10b4:	93 94       	inc	r9
    10b6:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZL16currentCharacterv>
    10ba:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
    10be:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__data_end+0x1>
    10c2:	2f 5f       	subi	r18, 0xFF	; 255
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__data_end+0x1>
    10ca:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__data_end>
    10ce:	85 36       	cpi	r24, 0x65	; 101
    10d0:	31 f7       	brne	.-52     	; 0x109e <_ZL8nextNotev+0x60>
    10d2:	52 c0       	rjmp	.+164    	; 0x1178 <_ZL8nextNotev+0x13a>
    10d4:	81 32       	cpi	r24, 0x21	; 33
    10d6:	09 f0       	breq	.+2      	; 0x10da <_ZL8nextNotev+0x9c>
    10d8:	8b c0       	rjmp	.+278    	; 0x11f0 <_ZL8nextNotev+0x1b2>
    10da:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <_ZL6octave>
    10de:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_ZL19whole_note_duration+0x1>
    10e2:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_ZL19whole_note_duration>
    10e6:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <_ZL9note_type+0x1>
    10ea:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <_ZL9note_type>
    10ee:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <_ZL8duration+0x1>
    10f2:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <_ZL8duration>
    10f6:	50 92 01 01 	sts	0x0101, r5	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    10fa:	40 92 00 01 	sts	0x0100, r4	; 0x800100 <__DATA_REGION_ORIGIN__>
    10fe:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <_ZL8staccato>
    1102:	a4 e0       	ldi	r26, 0x04	; 4
    1104:	9a 2e       	mov	r9, r26
    1106:	d7 cf       	rjmp	.-82     	; 0x10b6 <_ZL8nextNotev+0x78>
    1108:	83 36       	cpi	r24, 0x63	; 99
    110a:	a1 f1       	breq	.+104    	; 0x1174 <_ZL8nextNotev+0x136>
    110c:	0c f4       	brge	.+2      	; 0x1110 <_ZL8nextNotev+0xd2>
    110e:	78 c0       	rjmp	.+240    	; 0x1200 <_ZL8nextNotev+0x1c2>
    1110:	10 e0       	ldi	r17, 0x00	; 0
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	77 c0       	rjmp	.+238    	; 0x1204 <_ZL8nextNotev+0x1c6>
    1116:	8d 36       	cpi	r24, 0x6D	; 109
    1118:	c1 f1       	breq	.+112    	; 0x118a <_ZL8nextNotev+0x14c>
    111a:	94 f4       	brge	.+36     	; 0x1140 <_ZL8nextNotev+0x102>
    111c:	87 36       	cpi	r24, 0x67	; 103
    111e:	91 f1       	breq	.+100    	; 0x1184 <_ZL8nextNotev+0x146>
    1120:	74 f1       	brlt	.+92     	; 0x117e <_ZL8nextNotev+0x140>
    1122:	8c 36       	cpi	r24, 0x6C	; 108
    1124:	09 f0       	breq	.+2      	; 0x1128 <_ZL8nextNotev+0xea>
    1126:	64 c0       	rjmp	.+200    	; 0x11f0 <_ZL8nextNotev+0x1b2>
    1128:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZL9getNumberv>
    112c:	bc 01       	movw	r22, r24
    112e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_ZL9note_type+0x1>
    1132:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZL9note_type>
    1136:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    113a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    113e:	51 c0       	rjmp	.+162    	; 0x11e2 <_ZL8nextNotev+0x1a4>
    1140:	82 37       	cpi	r24, 0x72	; 114
    1142:	c9 f1       	breq	.+114    	; 0x11b6 <_ZL8nextNotev+0x178>
    1144:	4c f4       	brge	.+18     	; 0x1158 <_ZL8nextNotev+0x11a>
    1146:	8f 36       	cpi	r24, 0x6F	; 111
    1148:	09 f0       	breq	.+2      	; 0x114c <_ZL8nextNotev+0x10e>
    114a:	52 c0       	rjmp	.+164    	; 0x11f0 <_ZL8nextNotev+0x1b2>
    114c:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZL9getNumberv>
    1150:	98 2e       	mov	r9, r24
    1152:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL6octave>
    1156:	af cf       	rjmp	.-162    	; 0x10b6 <_ZL8nextNotev+0x78>
    1158:	84 37       	cpi	r24, 0x74	; 116
    115a:	81 f1       	breq	.+96     	; 0x11bc <_ZL8nextNotev+0x17e>
    115c:	86 37       	cpi	r24, 0x76	; 118
    115e:	09 f0       	breq	.+2      	; 0x1162 <_ZL8nextNotev+0x124>
    1160:	47 c0       	rjmp	.+142    	; 0x11f0 <_ZL8nextNotev+0x1b2>
    1162:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZL9getNumberv>
    1166:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    116a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    116e:	a3 cf       	rjmp	.-186    	; 0x10b6 <_ZL8nextNotev+0x78>
    1170:	9a 94       	dec	r9
    1172:	a1 cf       	rjmp	.-190    	; 0x10b6 <_ZL8nextNotev+0x78>
    1174:	10 e0       	ldi	r17, 0x00	; 0
    1176:	20 c0       	rjmp	.+64     	; 0x11b8 <_ZL8nextNotev+0x17a>
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	84 e0       	ldi	r24, 0x04	; 4
    117c:	43 c0       	rjmp	.+134    	; 0x1204 <_ZL8nextNotev+0x1c6>
    117e:	10 e0       	ldi	r17, 0x00	; 0
    1180:	85 e0       	ldi	r24, 0x05	; 5
    1182:	40 c0       	rjmp	.+128    	; 0x1204 <_ZL8nextNotev+0x1c6>
    1184:	10 e0       	ldi	r17, 0x00	; 0
    1186:	87 e0       	ldi	r24, 0x07	; 7
    1188:	3d c0       	rjmp	.+122    	; 0x1204 <_ZL8nextNotev+0x1c6>
    118a:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZL16currentCharacterv>
    118e:	8c 36       	cpi	r24, 0x6C	; 108
    1190:	19 f4       	brne	.+6      	; 0x1198 <_ZL8nextNotev+0x15a>
    1192:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <_ZL8staccato>
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <_ZL8nextNotev+0x162>
    1198:	70 92 46 01 	sts	0x0146, r7	; 0x800146 <_ZL8staccato>
    119c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <_ZL22staccato_rest_duration>
    11a0:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
    11a4:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__data_end+0x1>
    11a8:	2f 5f       	subi	r18, 0xFF	; 255
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__data_end+0x1>
    11b0:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__data_end>
    11b4:	80 cf       	rjmp	.-256    	; 0x10b6 <_ZL8nextNotev+0x78>
    11b6:	11 e0       	ldi	r17, 0x01	; 1
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	24 c0       	rjmp	.+72     	; 0x1204 <_ZL8nextNotev+0x1c6>
    11bc:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZL9getNumberv>
    11c0:	bc 01       	movw	r22, r24
    11c2:	c5 01       	movw	r24, r10
    11c4:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__udivmodhi4>
    11c8:	66 9e       	mul	r6, r22
    11ca:	c0 01       	movw	r24, r0
    11cc:	67 9e       	mul	r6, r23
    11ce:	90 0d       	add	r25, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL19whole_note_duration+0x1>
    11d6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL19whole_note_duration>
    11da:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL9note_type>
    11de:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL9note_type+0x1>
    11e2:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__udivmodhi4>
    11e6:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_ZL8duration+0x1>
    11ea:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_ZL8duration>
    11ee:	63 cf       	rjmp	.-314    	; 0x10b6 <_ZL8nextNotev+0x78>
    11f0:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x1>
    11f4:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
    11f8:	69 c0       	rjmp	.+210    	; 0x12cc <_ZL8nextNotev+0x28e>
    11fa:	10 e0       	ldi	r17, 0x00	; 0
    11fc:	89 e0       	ldi	r24, 0x09	; 9
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <_ZL8nextNotev+0x1c6>
    1200:	10 e0       	ldi	r17, 0x00	; 0
    1202:	8b e0       	ldi	r24, 0x0B	; 11
    1204:	08 2f       	mov	r16, r24
    1206:	9c e0       	ldi	r25, 0x0C	; 12
    1208:	99 9e       	mul	r9, r25
    120a:	00 0d       	add	r16, r0
    120c:	11 24       	eor	r1, r1
    120e:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZL16currentCharacterv>
    1212:	98 2f       	mov	r25, r24
    1214:	97 7f       	andi	r25, 0xF7	; 247
    1216:	93 32       	cpi	r25, 0x23	; 35
    1218:	61 f4       	brne	.+24     	; 0x1232 <_ZL8nextNotev+0x1f4>
    121a:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
    121e:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__data_end+0x1>
    1222:	2f 5f       	subi	r18, 0xFF	; 255
    1224:	3f 4f       	sbci	r19, 0xFF	; 255
    1226:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__data_end+0x1>
    122a:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__data_end>
    122e:	0f 5f       	subi	r16, 0xFF	; 255
    1230:	ee cf       	rjmp	.-36     	; 0x120e <_ZL8nextNotev+0x1d0>
    1232:	8d 32       	cpi	r24, 0x2D	; 45
    1234:	71 f4       	brne	.+28     	; 0x1252 <_ZL8nextNotev+0x214>
    1236:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
    123a:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__data_end+0x1>
    123e:	2f 5f       	subi	r18, 0xFF	; 255
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__data_end+0x1>
    1246:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__data_end>
    124a:	01 50       	subi	r16, 0x01	; 1
    124c:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZL16currentCharacterv>
    1250:	f0 cf       	rjmp	.-32     	; 0x1232 <_ZL8nextNotev+0x1f4>
    1252:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_ZL8duration>
    1256:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <_ZL8duration+0x1>
    125a:	81 53       	subi	r24, 0x31	; 49
    125c:	88 30       	cpi	r24, 0x08	; 8
    125e:	50 f4       	brcc	.+20     	; 0x1274 <_ZL8nextNotev+0x236>
    1260:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    1264:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    1268:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZL9getNumberv>
    126c:	bc 01       	movw	r22, r24
    126e:	c7 01       	movw	r24, r14
    1270:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__udivmodhi4>
    1274:	7b 01       	movw	r14, r22
    1276:	f6 94       	lsr	r15
    1278:	e7 94       	ror	r14
    127a:	69 83       	std	Y+1, r22	; 0x01
    127c:	7a 83       	std	Y+2, r23	; 0x02
    127e:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZL16currentCharacterv>
    1282:	69 81       	ldd	r22, Y+1	; 0x01
    1284:	7a 81       	ldd	r23, Y+2	; 0x02
    1286:	8e 32       	cpi	r24, 0x2E	; 46
    1288:	69 f4       	brne	.+26     	; 0x12a4 <_ZL8nextNotev+0x266>
    128a:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
    128e:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__data_end+0x1>
    1292:	2f 5f       	subi	r18, 0xFF	; 255
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__data_end+0x1>
    129a:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__data_end>
    129e:	6e 0d       	add	r22, r14
    12a0:	7f 1d       	adc	r23, r15
    12a2:	e9 cf       	rjmp	.-46     	; 0x1276 <_ZL8nextNotev+0x238>
    12a4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <_ZL8staccato>
    12a8:	88 23       	and	r24, r24
    12aa:	39 f0       	breq	.+14     	; 0x12ba <_ZL8nextNotev+0x27c>
    12ac:	9b 01       	movw	r18, r22
    12ae:	36 95       	lsr	r19
    12b0:	27 95       	ror	r18
    12b2:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <_ZL22staccato_rest_duration>
    12b6:	62 1b       	sub	r22, r18
    12b8:	71 09       	sbc	r23, r1
    12ba:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    12be:	11 23       	and	r17, r17
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <_ZL8nextNotev+0x288>
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <_ZL8nextNotev+0x28a>
    12c6:	80 2f       	mov	r24, r16
    12c8:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN15OrangutanBuzzer8playNoteEhjh>
    12cc:	22 96       	adiw	r28, 0x02	; 2
    12ce:	e0 e1       	ldi	r30, 0x10	; 16
    12d0:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__epilogue_restores__+0x4>

000012d4 <__vector_13>:
    12d4:	1f 92       	push	r1
    12d6:	0f 92       	push	r0
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	0f 92       	push	r0
    12dc:	11 24       	eor	r1, r1
    12de:	2f 93       	push	r18
    12e0:	3f 93       	push	r19
    12e2:	4f 93       	push	r20
    12e4:	5f 93       	push	r21
    12e6:	6f 93       	push	r22
    12e8:	7f 93       	push	r23
    12ea:	8f 93       	push	r24
    12ec:	9f 93       	push	r25
    12ee:	af 93       	push	r26
    12f0:	bf 93       	push	r27
    12f2:	ef 93       	push	r30
    12f4:	ff 93       	push	r31
    12f6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_ZL13buzzerTimeout>
    12fa:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <_ZL13buzzerTimeout+0x1>
    12fe:	9c 01       	movw	r18, r24
    1300:	21 50       	subi	r18, 0x01	; 1
    1302:	31 09       	sbc	r19, r1
    1304:	30 93 4a 01 	sts	0x014A, r19	; 0x80014a <_ZL13buzzerTimeout+0x1>
    1308:	20 93 49 01 	sts	0x0149, r18	; 0x800149 <_ZL13buzzerTimeout>
    130c:	89 2b       	or	r24, r25
    130e:	11 f5       	brne	.+68     	; 0x1354 <__vector_13+0x80>
    1310:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1314:	78 94       	sei
    1316:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    131a:	88 7f       	andi	r24, 0xF8	; 248
    131c:	81 60       	ori	r24, 0x01	; 1
    131e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1322:	80 e1       	ldi	r24, 0x10	; 16
    1324:	97 e2       	ldi	r25, 0x27	; 39
    1326:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    132a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    132e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1332:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buzzerFinished>
    133c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    1340:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    1344:	89 2b       	or	r24, r25
    1346:	31 f0       	breq	.+12     	; 0x1354 <__vector_13+0x80>
    1348:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <_ZL17play_mode_setting>
    134c:	81 11       	cpse	r24, r1
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <__vector_13+0x80>
    1350:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZL8nextNotev>
    1354:	ff 91       	pop	r31
    1356:	ef 91       	pop	r30
    1358:	bf 91       	pop	r27
    135a:	af 91       	pop	r26
    135c:	9f 91       	pop	r25
    135e:	8f 91       	pop	r24
    1360:	7f 91       	pop	r23
    1362:	6f 91       	pop	r22
    1364:	5f 91       	pop	r21
    1366:	4f 91       	pop	r20
    1368:	3f 91       	pop	r19
    136a:	2f 91       	pop	r18
    136c:	0f 90       	pop	r0
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	0f 90       	pop	r0
    1372:	1f 90       	pop	r1
    1374:	18 95       	reti

00001376 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1376:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    137a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x1>
    137e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_ZL17use_program_space>
    1388:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <_ZL22staccato_rest_duration>
    138c:	0e 94 1f 08 	call	0x103e	; 0x103e <_ZL8nextNotev>
    1390:	08 95       	ret

00001392 <play_from_program_space>:
    1392:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1396:	08 95       	ret

00001398 <_ZN16OrangutanDigital9setOutputEhh>:
    1398:	88 30       	cpi	r24, 0x08	; 8
    139a:	58 f4       	brcc	.+22     	; 0x13b2 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    13a0:	99 0f       	add	r25, r25
    13a2:	8a 95       	dec	r24
    13a4:	ea f7       	brpl	.-6      	; 0x13a0 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    13a6:	89 2f       	mov	r24, r25
    13a8:	aa e2       	ldi	r26, 0x2A	; 42
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	eb e2       	ldi	r30, 0x2B	; 43
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	21 c0       	rjmp	.+66     	; 0x13f4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    13b2:	8e 30       	cpi	r24, 0x0E	; 14
    13b4:	60 f4       	brcc	.+24     	; 0x13ce <_ZN16OrangutanDigital9setOutputEhh+0x36>
    13b6:	98 ef       	ldi	r25, 0xF8	; 248
    13b8:	98 0f       	add	r25, r24
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    13be:	88 0f       	add	r24, r24
    13c0:	9a 95       	dec	r25
    13c2:	ea f7       	brpl	.-6      	; 0x13be <_ZN16OrangutanDigital9setOutputEhh+0x26>
    13c4:	a4 e2       	ldi	r26, 0x24	; 36
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e5 e2       	ldi	r30, 0x25	; 37
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	13 c0       	rjmp	.+38     	; 0x13f4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    13ce:	85 31       	cpi	r24, 0x15	; 21
    13d0:	60 f4       	brcc	.+24     	; 0x13ea <_ZN16OrangutanDigital9setOutputEhh+0x52>
    13d2:	92 ef       	ldi	r25, 0xF2	; 242
    13d4:	98 0f       	add	r25, r24
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <_ZN16OrangutanDigital9setOutputEhh+0x44>
    13da:	88 0f       	add	r24, r24
    13dc:	9a 95       	dec	r25
    13de:	ea f7       	brpl	.-6      	; 0x13da <_ZN16OrangutanDigital9setOutputEhh+0x42>
    13e0:	a7 e2       	ldi	r26, 0x27	; 39
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e8 e2       	ldi	r30, 0x28	; 40
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	a0 e0       	ldi	r26, 0x00	; 0
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e0 e0       	ldi	r30, 0x00	; 0
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	6f 3f       	cpi	r22, 0xFF	; 255
    13f6:	19 f4       	brne	.+6      	; 0x13fe <_ZN16OrangutanDigital9setOutputEhh+0x66>
    13f8:	90 81       	ld	r25, Z
    13fa:	98 27       	eor	r25, r24
    13fc:	09 c0       	rjmp	.+18     	; 0x1410 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    13fe:	66 23       	and	r22, r22
    1400:	19 f0       	breq	.+6      	; 0x1408 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1402:	90 81       	ld	r25, Z
    1404:	98 2b       	or	r25, r24
    1406:	04 c0       	rjmp	.+8      	; 0x1410 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1408:	20 81       	ld	r18, Z
    140a:	98 2f       	mov	r25, r24
    140c:	90 95       	com	r25
    140e:	92 23       	and	r25, r18
    1410:	90 83       	st	Z, r25
    1412:	9c 91       	ld	r25, X
    1414:	98 2b       	or	r25, r24
    1416:	9c 93       	st	X, r25
    1418:	08 95       	ret

0000141a <_ZN15OrangutanMotors5init2Ev>:
    141a:	83 ef       	ldi	r24, 0xF3	; 243
    141c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1420:	84 bd       	out	0x24, r24	; 36
    1422:	82 e0       	ldi	r24, 0x02	; 2
    1424:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1428:	85 bd       	out	0x25, r24	; 37
    142a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    142e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    1432:	18 bc       	out	0x28, r1	; 40
    1434:	17 bc       	out	0x27, r1	; 39
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	86 e0       	ldi	r24, 0x06	; 6
    143a:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN16OrangutanDigital9setOutputEhh>
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	85 e0       	ldi	r24, 0x05	; 5
    1442:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN16OrangutanDigital9setOutputEhh>
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	8b e0       	ldi	r24, 0x0B	; 11
    144a:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN16OrangutanDigital9setOutputEhh>
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	83 e0       	ldi	r24, 0x03	; 3
    1452:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN16OrangutanDigital9setOutputEhh>
    1456:	08 95       	ret

00001458 <_ZN15OrangutanMotors4initEv>:
    1458:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_ZZN15OrangutanMotors4initEvE11initialized>
    145c:	81 11       	cpse	r24, r1
    145e:	05 c0       	rjmp	.+10     	; 0x146a <_ZN15OrangutanMotors4initEv+0x12>
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <_ZZN15OrangutanMotors4initEvE11initialized>
    1466:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN15OrangutanMotors5init2Ev>
    146a:	08 95       	ret

0000146c <_ZN15OrangutanMotors10setM1SpeedEi>:
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	ec 01       	movw	r28, r24
    1472:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_ZN15OrangutanMotors4initEv>
    1476:	d7 ff       	sbrs	r29, 7
    1478:	05 c0       	rjmp	.+10     	; 0x1484 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    147a:	d1 95       	neg	r29
    147c:	c1 95       	neg	r28
    147e:	d1 09       	sbc	r29, r1
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	01 c0       	rjmp	.+2      	; 0x1486 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	cf 3f       	cpi	r28, 0xFF	; 255
    1488:	d1 05       	cpc	r29, r1
    148a:	19 f0       	breq	.+6      	; 0x1492 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    148c:	14 f0       	brlt	.+4      	; 0x1492 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    148e:	cf ef       	ldi	r28, 0xFF	; 255
    1490:	d0 e0       	ldi	r29, 0x00	; 0
    1492:	88 23       	and	r24, r24
    1494:	19 f0       	breq	.+6      	; 0x149c <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1496:	18 bc       	out	0x28, r1	; 40
    1498:	c7 bd       	out	0x27, r28	; 39
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    149c:	c8 bd       	out	0x28, r28	; 40
    149e:	17 bc       	out	0x27, r1	; 39
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <_ZN15OrangutanMotors10setM2SpeedEi>:
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	ec 01       	movw	r28, r24
    14ac:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_ZN15OrangutanMotors4initEv>
    14b0:	d7 ff       	sbrs	r29, 7
    14b2:	05 c0       	rjmp	.+10     	; 0x14be <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    14b4:	d1 95       	neg	r29
    14b6:	c1 95       	neg	r28
    14b8:	d1 09       	sbc	r29, r1
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	cf 3f       	cpi	r28, 0xFF	; 255
    14c2:	d1 05       	cpc	r29, r1
    14c4:	19 f0       	breq	.+6      	; 0x14cc <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    14c6:	14 f0       	brlt	.+4      	; 0x14cc <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    14c8:	cf ef       	ldi	r28, 0xFF	; 255
    14ca:	d0 e0       	ldi	r29, 0x00	; 0
    14cc:	88 23       	and	r24, r24
    14ce:	29 f0       	breq	.+10     	; 0x14da <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    14d0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    14d4:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    14da:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    14de:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	08 95       	ret

000014e8 <_ZN15OrangutanMotors9setSpeedsEii>:
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	eb 01       	movw	r28, r22
    14ee:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN15OrangutanMotors10setM1SpeedEi>
    14f2:	ce 01       	movw	r24, r28
    14f4:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_ZN15OrangutanMotors10setM2SpeedEi>
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <set_motors>:
    14fe:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN15OrangutanMotors9setSpeedsEii>
    1502:	08 95       	ret

00001504 <_ZN20OrangutanPushbuttons5init2Ev>:
    1504:	84 b1       	in	r24, 0x04	; 4
    1506:	8d 7c       	andi	r24, 0xCD	; 205
    1508:	84 b9       	out	0x04, r24	; 4
    150a:	85 b1       	in	r24, 0x05	; 5
    150c:	82 63       	ori	r24, 0x32	; 50
    150e:	85 b9       	out	0x05, r24	; 5
    1510:	85 e0       	ldi	r24, 0x05	; 5
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	6f 93       	push	r22
    1516:	64 e0       	ldi	r22, 0x04	; 4
    1518:	6a 95       	dec	r22
    151a:	f1 f7       	brne	.-4      	; 0x1518 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    151c:	6f 91       	pop	r22
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	c9 f7       	brne	.-14     	; 0x1514 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1522:	08 95       	ret

00001524 <_ZN20OrangutanPushbuttons4initEv>:
    1524:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1528:	81 11       	cpse	r24, r1
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <_ZN20OrangutanPushbuttons4initEv+0x12>
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1532:	0e 94 82 0a 	call	0x1504	; 0x1504 <_ZN20OrangutanPushbuttons5init2Ev>
    1536:	08 95       	ret

00001538 <_ZN20OrangutanPushbuttons12waitForPressEh>:
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	18 2f       	mov	r17, r24
    1540:	0e 94 92 0a 	call	0x1524	; 0x1524 <_ZN20OrangutanPushbuttons4initEv>
    1544:	c1 2f       	mov	r28, r17
    1546:	d0 e0       	ldi	r29, 0x00	; 0
    1548:	23 b1       	in	r18, 0x03	; 3
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	20 95       	com	r18
    154e:	30 95       	com	r19
    1550:	2c 23       	and	r18, r28
    1552:	3d 23       	and	r19, r29
    1554:	23 2b       	or	r18, r19
    1556:	c1 f3       	breq	.-16     	; 0x1548 <_ZN20OrangutanPushbuttons12waitForPressEh+0x10>
    1558:	8a e0       	ldi	r24, 0x0A	; 10
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <delay_ms>
    1560:	23 b1       	in	r18, 0x03	; 3
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	20 95       	com	r18
    1566:	30 95       	com	r19
    1568:	2c 23       	and	r18, r28
    156a:	3d 23       	and	r19, r29
    156c:	23 2b       	or	r18, r19
    156e:	61 f3       	breq	.-40     	; 0x1548 <_ZN20OrangutanPushbuttons12waitForPressEh+0x10>
    1570:	83 b1       	in	r24, 0x03	; 3
    1572:	80 95       	com	r24
    1574:	81 23       	and	r24, r17
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	08 95       	ret

0000157e <wait_for_button_press>:
    157e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZN20OrangutanPushbuttons12waitForPressEh>
    1582:	08 95       	ret

00001584 <__vector_9>:
    1584:	2f 92       	push	r2
    1586:	8f 93       	push	r24
    1588:	9f 93       	push	r25
    158a:	2f b6       	in	r2, 0x3f	; 63
    158c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tickCount+0x1>
    1590:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tickCount+0x2>
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <tickCount+0x1>
    159a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <tickCount+0x2>
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <tickCount+0x3>
    15a4:	89 1f       	adc	r24, r25
    15a6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <tickCount+0x3>
    15aa:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <us_over_10+0x1>
    15ae:	9c 5f       	subi	r25, 0xFC	; 252
    15b0:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <us_over_10+0x1>
    15b4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <us_over_10>
    15b8:	80 51       	subi	r24, 0x10	; 16
    15ba:	97 42       	sbci	r25, 0x27	; 39
    15bc:	c0 f0       	brcs	.+48     	; 0x15ee <end>
    15be:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <us_over_10+0x1>
    15c2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <us_over_10>
    15c6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <msCounter>
    15ca:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <msCounter+0x1>
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <msCounter>
    15d4:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <msCounter+0x1>
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <msCounter+0x2>
    15de:	89 1f       	adc	r24, r25
    15e0:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <msCounter+0x2>
    15e4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <msCounter+0x3>
    15e8:	89 1f       	adc	r24, r25
    15ea:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <msCounter+0x3>

000015ee <end>:
    15ee:	2f be       	out	0x3f, r2	; 63
    15f0:	9f 91       	pop	r25
    15f2:	8f 91       	pop	r24
    15f4:	2f 90       	pop	r2
    15f6:	18 95       	reti

000015f8 <_ZN13OrangutanTime17delayMillisecondsEj>:
    15f8:	28 ee       	ldi	r18, 0xE8	; 232
    15fa:	33 e0       	ldi	r19, 0x03	; 3
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	48 f0       	brcs	.+18     	; 0x1612 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    1600:	f9 01       	movw	r30, r18
    1602:	6f 93       	push	r22
    1604:	64 e0       	ldi	r22, 0x04	; 4
    1606:	6a 95       	dec	r22
    1608:	f1 f7       	brne	.-4      	; 0x1606 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    160a:	6f 91       	pop	r22
    160c:	31 97       	sbiw	r30, 0x01	; 1
    160e:	c9 f7       	brne	.-14     	; 0x1602 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    1610:	f5 cf       	rjmp	.-22     	; 0x15fc <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    1612:	08 95       	ret

00001614 <delay_ms>:
    1614:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN13OrangutanTime17delayMillisecondsEj>
    1618:	08 95       	ret

0000161a <_ZN13OrangutanTime5init2Ev>:
    161a:	e0 e7       	ldi	r30, 0x70	; 112
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8e 7f       	andi	r24, 0xFE	; 254
    1622:	80 83       	st	Z, r24
    1624:	a0 eb       	ldi	r26, 0xB0	; 176
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	8c 91       	ld	r24, X
    162a:	83 60       	ori	r24, 0x03	; 3
    162c:	8c 93       	st	X, r24
    162e:	a1 eb       	ldi	r26, 0xB1	; 177
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	8c 91       	ld	r24, X
    1634:	80 7f       	andi	r24, 0xF0	; 240
    1636:	8c 93       	st	X, r24
    1638:	8c 91       	ld	r24, X
    163a:	82 60       	ori	r24, 0x02	; 2
    163c:	8c 93       	st	X, r24
    163e:	b8 9a       	sbi	0x17, 0	; 23
    1640:	80 81       	ld	r24, Z
    1642:	81 60       	ori	r24, 0x01	; 1
    1644:	80 83       	st	Z, r24
    1646:	78 94       	sei
    1648:	08 95       	ret

0000164a <_ZN13OrangutanTime4initEv>:
    164a:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_ZZN13OrangutanTime4initEvE11initialized>
    164e:	81 11       	cpse	r24, r1
    1650:	05 c0       	rjmp	.+10     	; 0x165c <_ZN13OrangutanTime4initEv+0x12>
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_ZZN13OrangutanTime4initEvE11initialized>
    1658:	0e 94 0d 0b 	call	0x161a	; 0x161a <_ZN13OrangutanTime5init2Ev>
    165c:	08 95       	ret

0000165e <_ZN13OrangutanTime2msEv>:
    165e:	0e 94 25 0b 	call	0x164a	; 0x164a <_ZN13OrangutanTime4initEv>
    1662:	e0 e7       	ldi	r30, 0x70	; 112
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8e 7f       	andi	r24, 0xFE	; 254
    166a:	80 83       	st	Z, r24
    166c:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <msCounter>
    1670:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <msCounter+0x1>
    1674:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <msCounter+0x2>
    1678:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <msCounter+0x3>
    167c:	20 81       	ld	r18, Z
    167e:	21 60       	ori	r18, 0x01	; 1
    1680:	20 83       	st	Z, r18
    1682:	08 95       	ret

00001684 <get_ms>:
    1684:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN13OrangutanTime2msEv>
    1688:	08 95       	ret

0000168a <_ZN13OrangutanTime5resetEv>:
    168a:	0e 94 25 0b 	call	0x164a	; 0x164a <_ZN13OrangutanTime4initEv>
    168e:	e0 e7       	ldi	r30, 0x70	; 112
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	8e 7f       	andi	r24, 0xFE	; 254
    1696:	80 83       	st	Z, r24
    1698:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <msCounter>
    169c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <msCounter+0x1>
    16a0:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <msCounter+0x2>
    16a4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <msCounter+0x3>
    16a8:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <us_over_10+0x1>
    16ac:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <us_over_10>
    16b0:	80 81       	ld	r24, Z
    16b2:	81 60       	ori	r24, 0x01	; 1
    16b4:	80 83       	st	Z, r24
    16b6:	08 95       	ret

000016b8 <read_line_sensors>:
    16b8:	46 2f       	mov	r20, r22
    16ba:	bc 01       	movw	r22, r24
    16bc:	85 e5       	ldi	r24, 0x55	; 85
    16be:	91 e0       	ldi	r25, 0x01	; 1
    16c0:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <_ZN16PololuQTRSensors4readEPjh>
    16c4:	08 95       	ret

000016c6 <_ZN9Pololu3pi4initEjh>:
    16c6:	0f 93       	push	r16
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <_ZN9Pololu3pi4initEjh+0x8>
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <_ZN9Pololu3pi4initEjh+0xa>
    16d0:	1f 92       	push	r1
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	9c 01       	movw	r18, r24
    16d8:	85 e0       	ldi	r24, 0x05	; 5
    16da:	ec e3       	ldi	r30, 0x3C	; 60
    16dc:	f1 e0       	ldi	r31, 0x01	; 1
    16de:	de 01       	movw	r26, r28
    16e0:	11 96       	adiw	r26, 0x01	; 1
    16e2:	01 90       	ld	r0, Z+
    16e4:	0d 92       	st	X+, r0
    16e6:	8a 95       	dec	r24
    16e8:	e1 f7       	brne	.-8      	; 0x16e2 <_ZN9Pololu3pi4initEjh+0x1c>
    16ea:	66 23       	and	r22, r22
    16ec:	11 f0       	breq	.+4      	; 0x16f2 <_ZN9Pololu3pi4initEjh+0x2c>
    16ee:	0f ef       	ldi	r16, 0xFF	; 255
    16f0:	01 c0       	rjmp	.+2      	; 0x16f4 <_ZN9Pololu3pi4initEjh+0x2e>
    16f2:	03 e1       	ldi	r16, 0x13	; 19
    16f4:	45 e0       	ldi	r20, 0x05	; 5
    16f6:	be 01       	movw	r22, r28
    16f8:	6f 5f       	subi	r22, 0xFF	; 255
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	85 e5       	ldi	r24, 0x55	; 85
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	0e 94 35 0c 	call	0x186a	; 0x186a <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1704:	85 e5       	ldi	r24, 0x55	; 85
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	0e 94 0c 0c 	call	0x1818	; 0x1818 <_ZN16PololuQTRSensors11emittersOffEv>
    170c:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN13OrangutanTime5resetEv>
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	0f 91       	pop	r16
    1720:	08 95       	ret

00001722 <pololu_3pi_init>:
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <_ZN9Pololu3pi4initEjh>
    1728:	08 95       	ret

0000172a <_GLOBAL__sub_D_pololu_3pi_init>:
    172a:	85 e5       	ldi	r24, 0x55	; 85
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZN16PololuQTRSensorsD1Ev>
    1732:	08 95       	ret

00001734 <delay_us>:
    1734:	6f 93       	push	r22
    1736:	64 e0       	ldi	r22, 0x04	; 4
    1738:	6a 95       	dec	r22
    173a:	f1 f7       	brne	.-4      	; 0x1738 <delay_us+0x4>
    173c:	6f 91       	pop	r22
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	c9 f7       	brne	.-14     	; 0x1734 <delay_us>
    1742:	08 95       	ret

00001744 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    1744:	fc 01       	movw	r30, r24
    1746:	11 82       	std	Z+1, r1	; 0x01
    1748:	10 82       	st	Z, r1
    174a:	13 82       	std	Z+3, r1	; 0x03
    174c:	12 82       	std	Z+2, r1	; 0x02
    174e:	15 82       	std	Z+5, r1	; 0x05
    1750:	14 82       	std	Z+4, r1	; 0x04
    1752:	16 82       	std	Z+6, r1	; 0x06
    1754:	68 30       	cpi	r22, 0x08	; 8
    1756:	68 f4       	brcc	.+26     	; 0x1772 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    1758:	89 e2       	ldi	r24, 0x29	; 41
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	91 83       	std	Z+1, r25	; 0x01
    175e:	80 83       	st	Z, r24
    1760:	8b e2       	ldi	r24, 0x2B	; 43
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	93 83       	std	Z+3, r25	; 0x03
    1766:	82 83       	std	Z+2, r24	; 0x02
    1768:	8a e2       	ldi	r24, 0x2A	; 42
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	95 83       	std	Z+5, r25	; 0x05
    176e:	84 83       	std	Z+4, r24	; 0x04
    1770:	1f c0       	rjmp	.+62     	; 0x17b0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    1772:	6e 30       	cpi	r22, 0x0E	; 14
    1774:	70 f4       	brcc	.+28     	; 0x1792 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    1776:	83 e2       	ldi	r24, 0x23	; 35
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	91 83       	std	Z+1, r25	; 0x01
    177c:	80 83       	st	Z, r24
    177e:	85 e2       	ldi	r24, 0x25	; 37
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	84 e2       	ldi	r24, 0x24	; 36
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	95 83       	std	Z+5, r25	; 0x05
    178c:	84 83       	std	Z+4, r24	; 0x04
    178e:	68 50       	subi	r22, 0x08	; 8
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    1792:	65 31       	cpi	r22, 0x15	; 21
    1794:	98 f4       	brcc	.+38     	; 0x17bc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    1796:	86 e2       	ldi	r24, 0x26	; 38
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
    179e:	88 e2       	ldi	r24, 0x28	; 40
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	93 83       	std	Z+3, r25	; 0x03
    17a4:	82 83       	std	Z+2, r24	; 0x02
    17a6:	87 e2       	ldi	r24, 0x27	; 39
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	95 83       	std	Z+5, r25	; 0x05
    17ac:	84 83       	std	Z+4, r24	; 0x04
    17ae:	6e 50       	subi	r22, 0x0E	; 14
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	01 c0       	rjmp	.+2      	; 0x17b6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    17b4:	88 0f       	add	r24, r24
    17b6:	6a 95       	dec	r22
    17b8:	ea f7       	brpl	.-6      	; 0x17b4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    17ba:	86 83       	std	Z+6, r24	; 0x06
    17bc:	08 95       	ret

000017be <_ZN16PololuQTRSensors4initEhhh>:
    17be:	a7 e0       	ldi	r26, 0x07	; 7
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e5 ee       	ldi	r30, 0xE5	; 229
    17c4:	fb e0       	ldi	r31, 0x0B	; 11
    17c6:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__prologue_saves__+0x1c>
    17ca:	8c 01       	movw	r16, r24
    17cc:	fc 01       	movw	r30, r24
    17ce:	11 82       	std	Z+1, r1	; 0x01
    17d0:	10 82       	st	Z, r1
    17d2:	13 82       	std	Z+3, r1	; 0x03
    17d4:	12 82       	std	Z+2, r1	; 0x02
    17d6:	15 82       	std	Z+5, r1	; 0x05
    17d8:	14 82       	std	Z+4, r1	; 0x04
    17da:	17 82       	std	Z+7, r1	; 0x07
    17dc:	16 82       	std	Z+6, r1	; 0x06
    17de:	61 31       	cpi	r22, 0x11	; 17
    17e0:	18 f0       	brcs	.+6      	; 0x17e8 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    17e2:	80 e1       	ldi	r24, 0x10	; 16
    17e4:	80 87       	std	Z+8, r24	; 0x08
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <_ZN16PololuQTRSensors4initEhhh+0x2e>
    17e8:	fc 01       	movw	r30, r24
    17ea:	60 87       	std	Z+8, r22	; 0x08
    17ec:	f8 01       	movw	r30, r16
    17ee:	20 8b       	std	Z+16, r18	; 0x10
    17f0:	64 2f       	mov	r22, r20
    17f2:	ce 01       	movw	r24, r28
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    17fa:	8f 81       	ldd	r24, Y+7	; 0x07
    17fc:	f8 01       	movw	r30, r16
    17fe:	81 87       	std	Z+9, r24	; 0x09
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	93 87       	std	Z+11, r25	; 0x0b
    1806:	82 87       	std	Z+10, r24	; 0x0a
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	95 87       	std	Z+13, r25	; 0x0d
    180e:	84 87       	std	Z+12, r24	; 0x0c
    1810:	27 96       	adiw	r28, 0x07	; 7
    1812:	e4 e0       	ldi	r30, 0x04	; 4
    1814:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__epilogue_restores__+0x1c>

00001818 <_ZN16PololuQTRSensors11emittersOffEv>:
    1818:	fc 01       	movw	r30, r24
    181a:	a4 85       	ldd	r26, Z+12	; 0x0c
    181c:	b5 85       	ldd	r27, Z+13	; 0x0d
    181e:	10 97       	sbiw	r26, 0x00	; 0
    1820:	79 f0       	breq	.+30     	; 0x1840 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1822:	8c 91       	ld	r24, X
    1824:	91 85       	ldd	r25, Z+9	; 0x09
    1826:	89 2b       	or	r24, r25
    1828:	8c 93       	st	X, r24
    182a:	a2 85       	ldd	r26, Z+10	; 0x0a
    182c:	b3 85       	ldd	r27, Z+11	; 0x0b
    182e:	9c 91       	ld	r25, X
    1830:	81 85       	ldd	r24, Z+9	; 0x09
    1832:	80 95       	com	r24
    1834:	89 23       	and	r24, r25
    1836:	8c 93       	st	X, r24
    1838:	88 ec       	ldi	r24, 0xC8	; 200
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <delay_us>
    1840:	08 95       	ret

00001842 <_ZN16PololuQTRSensors10emittersOnEv>:
    1842:	fc 01       	movw	r30, r24
    1844:	a4 85       	ldd	r26, Z+12	; 0x0c
    1846:	b5 85       	ldd	r27, Z+13	; 0x0d
    1848:	10 97       	sbiw	r26, 0x00	; 0
    184a:	71 f0       	breq	.+28     	; 0x1868 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    184c:	8c 91       	ld	r24, X
    184e:	91 85       	ldd	r25, Z+9	; 0x09
    1850:	89 2b       	or	r24, r25
    1852:	8c 93       	st	X, r24
    1854:	a2 85       	ldd	r26, Z+10	; 0x0a
    1856:	b3 85       	ldd	r27, Z+11	; 0x0b
    1858:	8c 91       	ld	r24, X
    185a:	91 85       	ldd	r25, Z+9	; 0x09
    185c:	89 2b       	or	r24, r25
    185e:	8c 93       	st	X, r24
    1860:	88 ec       	ldi	r24, 0xC8	; 200
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 9a 0b 	call	0x1734	; 0x1734 <delay_us>
    1868:	08 95       	ret

0000186a <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    186a:	a7 e0       	ldi	r26, 0x07	; 7
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	eb e3       	ldi	r30, 0x3B	; 59
    1870:	fc e0       	ldi	r31, 0x0C	; 12
    1872:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__prologue_saves__+0x6>
    1876:	7c 01       	movw	r14, r24
    1878:	4b 01       	movw	r8, r22
    187a:	64 2f       	mov	r22, r20
    187c:	39 01       	movw	r6, r18
    187e:	40 2f       	mov	r20, r16
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN16PololuQTRSensors4initEhhh>
    1886:	87 01       	movw	r16, r14
    1888:	0f 5b       	subi	r16, 0xBF	; 191
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
    188c:	f8 01       	movw	r30, r16
    188e:	10 82       	st	Z, r1
    1890:	67 01       	movw	r12, r14
    1892:	f2 e4       	ldi	r31, 0x42	; 66
    1894:	cf 0e       	add	r12, r31
    1896:	d1 1c       	adc	r13, r1
    1898:	f6 01       	movw	r30, r12
    189a:	10 82       	st	Z, r1
    189c:	57 01       	movw	r10, r14
    189e:	f3 e4       	ldi	r31, 0x43	; 67
    18a0:	af 0e       	add	r10, r31
    18a2:	b1 1c       	adc	r11, r1
    18a4:	f5 01       	movw	r30, r10
    18a6:	10 82       	st	Z, r1
    18a8:	f7 01       	movw	r30, r14
    18aa:	77 86       	std	Z+15, r7	; 0x0f
    18ac:	66 86       	std	Z+14, r6	; 0x0e
    18ae:	51 2c       	mov	r5, r1
    18b0:	f7 01       	movw	r30, r14
    18b2:	80 85       	ldd	r24, Z+8	; 0x08
    18b4:	58 16       	cp	r5, r24
    18b6:	50 f5       	brcc	.+84     	; 0x190c <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    18b8:	65 2c       	mov	r6, r5
    18ba:	71 2c       	mov	r7, r1
    18bc:	f4 01       	movw	r30, r8
    18be:	e6 0d       	add	r30, r6
    18c0:	f7 1d       	adc	r31, r7
    18c2:	60 81       	ld	r22, Z
    18c4:	ce 01       	movw	r24, r28
    18c6:	01 96       	adiw	r24, 0x01	; 1
    18c8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    18cc:	2f 81       	ldd	r18, Y+7	; 0x07
    18ce:	f7 01       	movw	r30, r14
    18d0:	e6 0d       	add	r30, r6
    18d2:	f7 1d       	adc	r31, r7
    18d4:	21 8b       	std	Z+17, r18	; 0x11
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	f3 01       	movw	r30, r6
    18dc:	ee 0f       	add	r30, r30
    18de:	ff 1f       	adc	r31, r31
    18e0:	ee 0d       	add	r30, r14
    18e2:	ff 1d       	adc	r31, r15
    18e4:	92 a3       	std	Z+34, r25	; 0x22
    18e6:	81 a3       	std	Z+33, r24	; 0x21
    18e8:	83 32       	cpi	r24, 0x23	; 35
    18ea:	91 05       	cpc	r25, r1
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    18ee:	f8 01       	movw	r30, r16
    18f0:	08 c0       	rjmp	.+16     	; 0x1902 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    18f2:	86 32       	cpi	r24, 0x26	; 38
    18f4:	91 05       	cpc	r25, r1
    18f6:	11 f4       	brne	.+4      	; 0x18fc <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    18f8:	f6 01       	movw	r30, r12
    18fa:	03 c0       	rjmp	.+6      	; 0x1902 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    18fc:	89 97       	sbiw	r24, 0x29	; 41
    18fe:	21 f4       	brne	.+8      	; 0x1908 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    1900:	f5 01       	movw	r30, r10
    1902:	80 81       	ld	r24, Z
    1904:	82 2b       	or	r24, r18
    1906:	80 83       	st	Z, r24
    1908:	53 94       	inc	r5
    190a:	d2 cf       	rjmp	.-92     	; 0x18b0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    190c:	27 96       	adiw	r28, 0x07	; 7
    190e:	ef e0       	ldi	r30, 0x0F	; 15
    1910:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__epilogue_restores__+0x6>

00001914 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1914:	a0 e0       	ldi	r26, 0x00	; 0
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e0 e9       	ldi	r30, 0x90	; 144
    191a:	fc e0       	ldi	r31, 0x0C	; 12
    191c:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__prologue_saves__+0xa>
    1920:	ec 01       	movw	r28, r24
    1922:	5b 01       	movw	r10, r22
    1924:	6c 01       	movw	r12, r24
    1926:	81 e4       	ldi	r24, 0x41	; 65
    1928:	c8 0e       	add	r12, r24
    192a:	d1 1c       	adc	r13, r1
    192c:	f6 01       	movw	r30, r12
    192e:	80 80       	ld	r8, Z
    1930:	7e 01       	movw	r14, r28
    1932:	f2 e4       	ldi	r31, 0x42	; 66
    1934:	ef 0e       	add	r14, r31
    1936:	f1 1c       	adc	r15, r1
    1938:	f7 01       	movw	r30, r14
    193a:	70 80       	ld	r7, Z
    193c:	8e 01       	movw	r16, r28
    193e:	0d 5b       	subi	r16, 0xBD	; 189
    1940:	1f 4f       	sbci	r17, 0xFF	; 255
    1942:	f8 01       	movw	r30, r16
    1944:	90 80       	ld	r9, Z
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	98 85       	ldd	r25, Y+8	; 0x08
    194a:	89 17       	cp	r24, r25
    194c:	48 f4       	brcc	.+18     	; 0x1960 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    194e:	f5 01       	movw	r30, r10
    1950:	e8 0f       	add	r30, r24
    1952:	f1 1d       	adc	r31, r1
    1954:	e8 0f       	add	r30, r24
    1956:	f1 1d       	adc	r31, r1
    1958:	11 82       	std	Z+1, r1	; 0x01
    195a:	10 82       	st	Z, r1
    195c:	8f 5f       	subi	r24, 0xFF	; 255
    195e:	f4 cf       	rjmp	.-24     	; 0x1948 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    1960:	84 b1       	in	r24, 0x04	; 4
    1962:	f6 01       	movw	r30, r12
    1964:	90 81       	ld	r25, Z
    1966:	89 2b       	or	r24, r25
    1968:	84 b9       	out	0x04, r24	; 4
    196a:	87 b1       	in	r24, 0x07	; 7
    196c:	f7 01       	movw	r30, r14
    196e:	90 81       	ld	r25, Z
    1970:	89 2b       	or	r24, r25
    1972:	87 b9       	out	0x07, r24	; 7
    1974:	8a b1       	in	r24, 0x0a	; 10
    1976:	f8 01       	movw	r30, r16
    1978:	90 81       	ld	r25, Z
    197a:	89 2b       	or	r24, r25
    197c:	8a b9       	out	0x0a, r24	; 10
    197e:	85 b1       	in	r24, 0x05	; 5
    1980:	f6 01       	movw	r30, r12
    1982:	90 81       	ld	r25, Z
    1984:	89 2b       	or	r24, r25
    1986:	85 b9       	out	0x05, r24	; 5
    1988:	88 b1       	in	r24, 0x08	; 8
    198a:	f7 01       	movw	r30, r14
    198c:	90 81       	ld	r25, Z
    198e:	89 2b       	or	r24, r25
    1990:	88 b9       	out	0x08, r24	; 8
    1992:	8b b1       	in	r24, 0x0b	; 11
    1994:	f8 01       	movw	r30, r16
    1996:	90 81       	ld	r25, Z
    1998:	89 2b       	or	r24, r25
    199a:	8b b9       	out	0x0b, r24	; 11
    199c:	8a e0       	ldi	r24, 0x0A	; 10
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 9a 0b 	call	0x1734	; 0x1734 <delay_us>
    19a4:	94 b1       	in	r25, 0x04	; 4
    19a6:	f6 01       	movw	r30, r12
    19a8:	80 81       	ld	r24, Z
    19aa:	80 95       	com	r24
    19ac:	89 23       	and	r24, r25
    19ae:	84 b9       	out	0x04, r24	; 4
    19b0:	97 b1       	in	r25, 0x07	; 7
    19b2:	f7 01       	movw	r30, r14
    19b4:	80 81       	ld	r24, Z
    19b6:	80 95       	com	r24
    19b8:	89 23       	and	r24, r25
    19ba:	87 b9       	out	0x07, r24	; 7
    19bc:	9a b1       	in	r25, 0x0a	; 10
    19be:	f8 01       	movw	r30, r16
    19c0:	80 81       	ld	r24, Z
    19c2:	80 95       	com	r24
    19c4:	89 23       	and	r24, r25
    19c6:	8a b9       	out	0x0a, r24	; 10
    19c8:	95 b1       	in	r25, 0x05	; 5
    19ca:	f6 01       	movw	r30, r12
    19cc:	80 81       	ld	r24, Z
    19ce:	80 95       	com	r24
    19d0:	89 23       	and	r24, r25
    19d2:	85 b9       	out	0x05, r24	; 5
    19d4:	98 b1       	in	r25, 0x08	; 8
    19d6:	f7 01       	movw	r30, r14
    19d8:	80 81       	ld	r24, Z
    19da:	80 95       	com	r24
    19dc:	89 23       	and	r24, r25
    19de:	88 b9       	out	0x08, r24	; 8
    19e0:	9b b1       	in	r25, 0x0b	; 11
    19e2:	f8 01       	movw	r30, r16
    19e4:	80 81       	ld	r24, Z
    19e6:	80 95       	com	r24
    19e8:	89 23       	and	r24, r25
    19ea:	8b b9       	out	0x0b, r24	; 11
    19ec:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    19f0:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    19f4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    19f8:	83 60       	ori	r24, 0x03	; 3
    19fa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1a04:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a0e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a10:	82 17       	cp	r24, r18
    1a12:	93 07       	cpc	r25, r19
    1a14:	20 f5       	brcc	.+72     	; 0x1a5e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    1a16:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    1a1a:	2c 2d       	mov	r18, r12
    1a1c:	24 1b       	sub	r18, r20
    1a1e:	82 0f       	add	r24, r18
    1a20:	91 1d       	adc	r25, r1
    1a22:	03 b1       	in	r16, 0x03	; 3
    1a24:	08 11       	cpse	r16, r8
    1a26:	32 c0       	rjmp	.+100    	; 0x1a8c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1a28:	f6 b0       	in	r15, 0x06	; 6
    1a2a:	f7 10       	cpse	r15, r7
    1a2c:	2f c0       	rjmp	.+94     	; 0x1a8c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1a2e:	29 b1       	in	r18, 0x09	; 9
    1a30:	29 11       	cpse	r18, r9
    1a32:	2c c0       	rjmp	.+88     	; 0x1a8c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1a34:	10 c0       	rjmp	.+32     	; 0x1a56 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    1a36:	21 2f       	mov	r18, r17
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	a9 01       	movw	r20, r18
    1a3c:	44 0f       	add	r20, r20
    1a3e:	55 1f       	adc	r21, r21
    1a40:	f5 01       	movw	r30, r10
    1a42:	e4 0f       	add	r30, r20
    1a44:	f5 1f       	adc	r31, r21
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	67 2b       	or	r22, r23
    1a4c:	21 f1       	breq	.+72     	; 0x1a96 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    1a4e:	1f 5f       	subi	r17, 0xFF	; 255
    1a50:	28 85       	ldd	r18, Y+8	; 0x08
    1a52:	12 17       	cp	r17, r18
    1a54:	80 f3       	brcs	.-32     	; 0x1a36 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    1a56:	7f 2c       	mov	r7, r15
    1a58:	80 2e       	mov	r8, r16
    1a5a:	4c 2d       	mov	r20, r12
    1a5c:	d7 cf       	rjmp	.-82     	; 0x1a0c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    1a5e:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1a62:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	88 85       	ldd	r24, Y+8	; 0x08
    1a6a:	28 17       	cp	r18, r24
    1a6c:	30 f5       	brcc	.+76     	; 0x1aba <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    1a6e:	f5 01       	movw	r30, r10
    1a70:	e2 0f       	add	r30, r18
    1a72:	f1 1d       	adc	r31, r1
    1a74:	e2 0f       	add	r30, r18
    1a76:	f1 1d       	adc	r31, r1
    1a78:	80 81       	ld	r24, Z
    1a7a:	91 81       	ldd	r25, Z+1	; 0x01
    1a7c:	89 2b       	or	r24, r25
    1a7e:	21 f4       	brne	.+8      	; 0x1a88 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1a80:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a82:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
    1a88:	2f 5f       	subi	r18, 0xFF	; 255
    1a8a:	ee cf       	rjmp	.-36     	; 0x1a68 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    1a8c:	03 b1       	in	r16, 0x03	; 3
    1a8e:	f6 b0       	in	r15, 0x06	; 6
    1a90:	99 b0       	in	r9, 0x09	; 9
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	dd cf       	rjmp	.-70     	; 0x1a50 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    1a96:	de 01       	movw	r26, r28
    1a98:	a4 0f       	add	r26, r20
    1a9a:	b5 1f       	adc	r27, r21
    1a9c:	91 96       	adiw	r26, 0x21	; 33
    1a9e:	0d 90       	ld	r0, X+
    1aa0:	bc 91       	ld	r27, X
    1aa2:	a0 2d       	mov	r26, r0
    1aa4:	4c 91       	ld	r20, X
    1aa6:	de 01       	movw	r26, r28
    1aa8:	a2 0f       	add	r26, r18
    1aaa:	b3 1f       	adc	r27, r19
    1aac:	51 96       	adiw	r26, 0x11	; 17
    1aae:	2c 91       	ld	r18, X
    1ab0:	42 23       	and	r20, r18
    1ab2:	69 f6       	brne	.-102    	; 0x1a4e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
    1ab8:	ca cf       	rjmp	.-108    	; 0x1a4e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	ed e0       	ldi	r30, 0x0D	; 13
    1ac0:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__epilogue_restores__+0xa>

00001ac4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1ac4:	ef 92       	push	r14
    1ac6:	ff 92       	push	r15
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	9b 01       	movw	r18, r22
    1ad4:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1ad8:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1adc:	47 b1       	in	r20, 0x07	; 7
    1ade:	18 b1       	in	r17, 0x08	; 8
    1ae0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1ae4:	86 fd       	sbrc	r24, 6
    1ae6:	fc cf       	rjmp	.-8      	; 0x1ae0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 85       	ldd	r25, Z+8	; 0x08
    1aec:	89 17       	cp	r24, r25
    1aee:	48 f4       	brcc	.+18     	; 0x1b02 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    1af0:	d9 01       	movw	r26, r18
    1af2:	a8 0f       	add	r26, r24
    1af4:	b1 1d       	adc	r27, r1
    1af6:	a8 0f       	add	r26, r24
    1af8:	b1 1d       	adc	r27, r1
    1afa:	1d 92       	st	X+, r1
    1afc:	1c 92       	st	X, r1
    1afe:	8f 5f       	subi	r24, 0xFF	; 255
    1b00:	f4 cf       	rjmp	.-24     	; 0x1aea <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    1b02:	97 b1       	in	r25, 0x07	; 7
    1b04:	82 a1       	ldd	r24, Z+34	; 0x22
    1b06:	80 95       	com	r24
    1b08:	89 23       	and	r24, r25
    1b0a:	87 b9       	out	0x07, r24	; 7
    1b0c:	98 b1       	in	r25, 0x08	; 8
    1b0e:	82 a1       	ldd	r24, Z+34	; 0x22
    1b10:	80 95       	com	r24
    1b12:	89 23       	and	r24, r25
    1b14:	88 b9       	out	0x08, r24	; 8
    1b16:	87 e8       	ldi	r24, 0x87	; 135
    1b18:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b1c:	e1 2c       	mov	r14, r1
    1b1e:	81 a1       	ldd	r24, Z+33	; 0x21
    1b20:	e8 16       	cp	r14, r24
    1b22:	10 f0       	brcs	.+4      	; 0x1b28 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    1b24:	e1 2c       	mov	r14, r1
    1b26:	29 c0       	rjmp	.+82     	; 0x1b7a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	80 85       	ldd	r24, Z+8	; 0x08
    1b2c:	58 17       	cp	r21, r24
    1b2e:	18 f5       	brcc	.+70     	; 0x1b76 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    1b30:	a5 2f       	mov	r26, r21
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	ef 01       	movw	r28, r30
    1b36:	ca 0f       	add	r28, r26
    1b38:	db 1f       	adc	r29, r27
    1b3a:	89 89       	ldd	r24, Y+17	; 0x11
    1b3c:	80 64       	ori	r24, 0x40	; 64
    1b3e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1b42:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b46:	80 64       	ori	r24, 0x40	; 64
    1b48:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b4c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b50:	86 fd       	sbrc	r24, 6
    1b52:	fc cf       	rjmp	.-8      	; 0x1b4c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    1b54:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1b58:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1b5c:	aa 0f       	add	r26, r26
    1b5e:	bb 1f       	adc	r27, r27
    1b60:	a2 0f       	add	r26, r18
    1b62:	b3 1f       	adc	r27, r19
    1b64:	8d 91       	ld	r24, X+
    1b66:	9c 91       	ld	r25, X
    1b68:	11 97       	sbiw	r26, 0x01	; 1
    1b6a:	86 0f       	add	r24, r22
    1b6c:	97 1f       	adc	r25, r23
    1b6e:	8d 93       	st	X+, r24
    1b70:	9c 93       	st	X, r25
    1b72:	5f 5f       	subi	r21, 0xFF	; 255
    1b74:	da cf       	rjmp	.-76     	; 0x1b2a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    1b76:	e3 94       	inc	r14
    1b78:	d2 cf       	rjmp	.-92     	; 0x1b1e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    1b7a:	80 85       	ldd	r24, Z+8	; 0x08
    1b7c:	e8 16       	cp	r14, r24
    1b7e:	a0 f4       	brcc	.+40     	; 0x1ba8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    1b80:	e9 01       	movw	r28, r18
    1b82:	ce 0d       	add	r28, r14
    1b84:	d1 1d       	adc	r29, r1
    1b86:	ce 0d       	add	r28, r14
    1b88:	d1 1d       	adc	r29, r1
    1b8a:	61 a1       	ldd	r22, Z+33	; 0x21
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	cb 01       	movw	r24, r22
    1b90:	95 95       	asr	r25
    1b92:	87 95       	ror	r24
    1b94:	a8 81       	ld	r26, Y
    1b96:	b9 81       	ldd	r27, Y+1	; 0x01
    1b98:	8a 0f       	add	r24, r26
    1b9a:	9b 1f       	adc	r25, r27
    1b9c:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__udivmodhi4>
    1ba0:	79 83       	std	Y+1, r23	; 0x01
    1ba2:	68 83       	st	Y, r22
    1ba4:	e3 94       	inc	r14
    1ba6:	e9 cf       	rjmp	.-46     	; 0x1b7a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1ba8:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1bac:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1bb0:	18 b9       	out	0x08, r17	; 8
    1bb2:	47 b9       	out	0x07, r20	; 7
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	e6 e0       	ldi	r30, 0x06	; 6
    1bba:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <__epilogue_restores__+0x18>

00001bbe <_ZN16PololuQTRSensors4readEPjh>:
    1bbe:	a0 e2       	ldi	r26, 0x20	; 32
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e5 ee       	ldi	r30, 0xE5	; 229
    1bc4:	fd e0       	ldi	r31, 0x0D	; 13
    1bc6:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__prologue_saves__+0x16>
    1bca:	8c 01       	movw	r16, r24
    1bcc:	7b 01       	movw	r14, r22
    1bce:	d4 2e       	mov	r13, r20
    1bd0:	8f ef       	ldi	r24, 0xFF	; 255
    1bd2:	84 0f       	add	r24, r20
    1bd4:	82 30       	cpi	r24, 0x02	; 2
    1bd6:	18 f4       	brcc	.+6      	; 0x1bde <_ZN16PololuQTRSensors4readEPjh+0x20>
    1bd8:	c8 01       	movw	r24, r16
    1bda:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN16PololuQTRSensors10emittersOnEv>
    1bde:	d8 01       	movw	r26, r16
    1be0:	50 96       	adiw	r26, 0x10	; 16
    1be2:	8c 91       	ld	r24, X
    1be4:	b7 01       	movw	r22, r14
    1be6:	81 11       	cpse	r24, r1
    1be8:	10 c0       	rjmp	.+32     	; 0x1c0a <_ZN16PololuQTRSensors4readEPjh+0x4c>
    1bea:	c8 01       	movw	r24, r16
    1bec:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1bf0:	c8 01       	movw	r24, r16
    1bf2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <_ZN16PololuQTRSensors11emittersOffEv>
    1bf6:	b2 e0       	ldi	r27, 0x02	; 2
    1bf8:	db 12       	cpse	r13, r27
    1bfa:	3a c0       	rjmp	.+116    	; 0x1c70 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1bfc:	be 01       	movw	r22, r28
    1bfe:	6f 5f       	subi	r22, 0xFF	; 255
    1c00:	7f 4f       	sbci	r23, 0xFF	; 255
    1c02:	c8 01       	movw	r24, r16
    1c04:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1c08:	0f c0       	rjmp	.+30     	; 0x1c28 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    1c0a:	c8 01       	movw	r24, r16
    1c0c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1c10:	c8 01       	movw	r24, r16
    1c12:	0e 94 0c 0c 	call	0x1818	; 0x1818 <_ZN16PololuQTRSensors11emittersOffEv>
    1c16:	e2 e0       	ldi	r30, 0x02	; 2
    1c18:	de 12       	cpse	r13, r30
    1c1a:	2a c0       	rjmp	.+84     	; 0x1c70 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1c1c:	be 01       	movw	r22, r28
    1c1e:	6f 5f       	subi	r22, 0xFF	; 255
    1c20:	7f 4f       	sbci	r23, 0xFF	; 255
    1c22:	c8 01       	movw	r24, r16
    1c24:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	80 85       	ldd	r24, Z+8	; 0x08
    1c2e:	48 17       	cp	r20, r24
    1c30:	f8 f4       	brcc	.+62     	; 0x1c70 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1c32:	84 2f       	mov	r24, r20
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	f7 01       	movw	r30, r14
    1c3c:	e8 0f       	add	r30, r24
    1c3e:	f9 1f       	adc	r31, r25
    1c40:	21 e0       	ldi	r18, 0x01	; 1
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	2c 0f       	add	r18, r28
    1c46:	3d 1f       	adc	r19, r29
    1c48:	82 0f       	add	r24, r18
    1c4a:	93 1f       	adc	r25, r19
    1c4c:	d8 01       	movw	r26, r16
    1c4e:	1e 96       	adiw	r26, 0x0e	; 14
    1c50:	2d 91       	ld	r18, X+
    1c52:	3c 91       	ld	r19, X
    1c54:	1f 97       	sbiw	r26, 0x0f	; 15
    1c56:	dc 01       	movw	r26, r24
    1c58:	8d 91       	ld	r24, X+
    1c5a:	9c 91       	ld	r25, X
    1c5c:	28 1b       	sub	r18, r24
    1c5e:	39 0b       	sbc	r19, r25
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	82 0f       	add	r24, r18
    1c66:	93 1f       	adc	r25, r19
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	80 83       	st	Z, r24
    1c6c:	4f 5f       	subi	r20, 0xFF	; 255
    1c6e:	dd cf       	rjmp	.-70     	; 0x1c2a <_ZN16PololuQTRSensors4readEPjh+0x6c>
    1c70:	a0 96       	adiw	r28, 0x20	; 32
    1c72:	e7 e0       	ldi	r30, 0x07	; 7
    1c74:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__epilogue_restores__+0x16>

00001c78 <_ZN16PololuQTRSensorsD1Ev>:
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	ec 01       	movw	r28, r24
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	9b 81       	ldd	r25, Y+3	; 0x03
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	11 f0       	breq	.+4      	; 0x1c8a <_ZN16PololuQTRSensorsD1Ev+0x12>
    1c86:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <free>
    1c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	11 f0       	breq	.+4      	; 0x1c96 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    1c92:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <free>
    1c96:	88 81       	ld	r24, Y
    1c98:	99 81       	ldd	r25, Y+1	; 0x01
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	11 f0       	breq	.+4      	; 0x1ca2 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    1c9e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <free>
    1ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	11 f0       	breq	.+4      	; 0x1cae <_ZN16PololuQTRSensorsD1Ev+0x36>
    1caa:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <free>
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	08 95       	ret

00001cb4 <__udivmodqi4>:
    1cb4:	99 1b       	sub	r25, r25
    1cb6:	79 e0       	ldi	r23, 0x09	; 9
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <__udivmodqi4_ep>

00001cba <__udivmodqi4_loop>:
    1cba:	99 1f       	adc	r25, r25
    1cbc:	96 17       	cp	r25, r22
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <__udivmodqi4_ep>
    1cc0:	96 1b       	sub	r25, r22

00001cc2 <__udivmodqi4_ep>:
    1cc2:	88 1f       	adc	r24, r24
    1cc4:	7a 95       	dec	r23
    1cc6:	c9 f7       	brne	.-14     	; 0x1cba <__udivmodqi4_loop>
    1cc8:	80 95       	com	r24
    1cca:	08 95       	ret

00001ccc <__udivmodhi4>:
    1ccc:	aa 1b       	sub	r26, r26
    1cce:	bb 1b       	sub	r27, r27
    1cd0:	51 e1       	ldi	r21, 0x11	; 17
    1cd2:	07 c0       	rjmp	.+14     	; 0x1ce2 <__udivmodhi4_ep>

00001cd4 <__udivmodhi4_loop>:
    1cd4:	aa 1f       	adc	r26, r26
    1cd6:	bb 1f       	adc	r27, r27
    1cd8:	a6 17       	cp	r26, r22
    1cda:	b7 07       	cpc	r27, r23
    1cdc:	10 f0       	brcs	.+4      	; 0x1ce2 <__udivmodhi4_ep>
    1cde:	a6 1b       	sub	r26, r22
    1ce0:	b7 0b       	sbc	r27, r23

00001ce2 <__udivmodhi4_ep>:
    1ce2:	88 1f       	adc	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	5a 95       	dec	r21
    1ce8:	a9 f7       	brne	.-22     	; 0x1cd4 <__udivmodhi4_loop>
    1cea:	80 95       	com	r24
    1cec:	90 95       	com	r25
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	08 95       	ret

00001cf4 <__divmodhi4>:
    1cf4:	97 fb       	bst	r25, 7
    1cf6:	07 2e       	mov	r0, r23
    1cf8:	16 f4       	brtc	.+4      	; 0x1cfe <__divmodhi4+0xa>
    1cfa:	00 94       	com	r0
    1cfc:	07 d0       	rcall	.+14     	; 0x1d0c <__divmodhi4_neg1>
    1cfe:	77 fd       	sbrc	r23, 7
    1d00:	09 d0       	rcall	.+18     	; 0x1d14 <__divmodhi4_neg2>
    1d02:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__udivmodhi4>
    1d06:	07 fc       	sbrc	r0, 7
    1d08:	05 d0       	rcall	.+10     	; 0x1d14 <__divmodhi4_neg2>
    1d0a:	3e f4       	brtc	.+14     	; 0x1d1a <__divmodhi4_exit>

00001d0c <__divmodhi4_neg1>:
    1d0c:	90 95       	com	r25
    1d0e:	81 95       	neg	r24
    1d10:	9f 4f       	sbci	r25, 0xFF	; 255
    1d12:	08 95       	ret

00001d14 <__divmodhi4_neg2>:
    1d14:	70 95       	com	r23
    1d16:	61 95       	neg	r22
    1d18:	7f 4f       	sbci	r23, 0xFF	; 255

00001d1a <__divmodhi4_exit>:
    1d1a:	08 95       	ret

00001d1c <__udivmodsi4>:
    1d1c:	a1 e2       	ldi	r26, 0x21	; 33
    1d1e:	1a 2e       	mov	r1, r26
    1d20:	aa 1b       	sub	r26, r26
    1d22:	bb 1b       	sub	r27, r27
    1d24:	fd 01       	movw	r30, r26
    1d26:	0d c0       	rjmp	.+26     	; 0x1d42 <__udivmodsi4_ep>

00001d28 <__udivmodsi4_loop>:
    1d28:	aa 1f       	adc	r26, r26
    1d2a:	bb 1f       	adc	r27, r27
    1d2c:	ee 1f       	adc	r30, r30
    1d2e:	ff 1f       	adc	r31, r31
    1d30:	a2 17       	cp	r26, r18
    1d32:	b3 07       	cpc	r27, r19
    1d34:	e4 07       	cpc	r30, r20
    1d36:	f5 07       	cpc	r31, r21
    1d38:	20 f0       	brcs	.+8      	; 0x1d42 <__udivmodsi4_ep>
    1d3a:	a2 1b       	sub	r26, r18
    1d3c:	b3 0b       	sbc	r27, r19
    1d3e:	e4 0b       	sbc	r30, r20
    1d40:	f5 0b       	sbc	r31, r21

00001d42 <__udivmodsi4_ep>:
    1d42:	66 1f       	adc	r22, r22
    1d44:	77 1f       	adc	r23, r23
    1d46:	88 1f       	adc	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	1a 94       	dec	r1
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <__udivmodsi4_loop>
    1d4e:	60 95       	com	r22
    1d50:	70 95       	com	r23
    1d52:	80 95       	com	r24
    1d54:	90 95       	com	r25
    1d56:	9b 01       	movw	r18, r22
    1d58:	ac 01       	movw	r20, r24
    1d5a:	bd 01       	movw	r22, r26
    1d5c:	cf 01       	movw	r24, r30
    1d5e:	08 95       	ret

00001d60 <__divmodsi4>:
    1d60:	05 2e       	mov	r0, r21
    1d62:	97 fb       	bst	r25, 7
    1d64:	1e f4       	brtc	.+6      	; 0x1d6c <__divmodsi4+0xc>
    1d66:	00 94       	com	r0
    1d68:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <__negsi2>
    1d6c:	57 fd       	sbrc	r21, 7
    1d6e:	07 d0       	rcall	.+14     	; 0x1d7e <__divmodsi4_neg2>
    1d70:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__udivmodsi4>
    1d74:	07 fc       	sbrc	r0, 7
    1d76:	03 d0       	rcall	.+6      	; 0x1d7e <__divmodsi4_neg2>
    1d78:	4e f4       	brtc	.+18     	; 0x1d8c <__divmodsi4_exit>
    1d7a:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__negsi2>

00001d7e <__divmodsi4_neg2>:
    1d7e:	50 95       	com	r21
    1d80:	40 95       	com	r20
    1d82:	30 95       	com	r19
    1d84:	21 95       	neg	r18
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	4f 4f       	sbci	r20, 0xFF	; 255
    1d8a:	5f 4f       	sbci	r21, 0xFF	; 255

00001d8c <__divmodsi4_exit>:
    1d8c:	08 95       	ret

00001d8e <__negsi2>:
    1d8e:	90 95       	com	r25
    1d90:	80 95       	com	r24
    1d92:	70 95       	com	r23
    1d94:	61 95       	neg	r22
    1d96:	7f 4f       	sbci	r23, 0xFF	; 255
    1d98:	8f 4f       	sbci	r24, 0xFF	; 255
    1d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9c:	08 95       	ret

00001d9e <__umulhisi3>:
    1d9e:	a2 9f       	mul	r26, r18
    1da0:	b0 01       	movw	r22, r0
    1da2:	b3 9f       	mul	r27, r19
    1da4:	c0 01       	movw	r24, r0
    1da6:	a3 9f       	mul	r26, r19
    1da8:	70 0d       	add	r23, r0
    1daa:	81 1d       	adc	r24, r1
    1dac:	11 24       	eor	r1, r1
    1dae:	91 1d       	adc	r25, r1
    1db0:	b2 9f       	mul	r27, r18
    1db2:	70 0d       	add	r23, r0
    1db4:	81 1d       	adc	r24, r1
    1db6:	11 24       	eor	r1, r1
    1db8:	91 1d       	adc	r25, r1
    1dba:	08 95       	ret

00001dbc <__prologue_saves__>:
    1dbc:	2f 92       	push	r2
    1dbe:	3f 92       	push	r3
    1dc0:	4f 92       	push	r4
    1dc2:	5f 92       	push	r5
    1dc4:	6f 92       	push	r6
    1dc6:	7f 92       	push	r7
    1dc8:	8f 92       	push	r8
    1dca:	9f 92       	push	r9
    1dcc:	af 92       	push	r10
    1dce:	bf 92       	push	r11
    1dd0:	cf 92       	push	r12
    1dd2:	df 92       	push	r13
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	ca 1b       	sub	r28, r26
    1de6:	db 0b       	sbc	r29, r27
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	09 94       	ijmp

00001df4 <__epilogue_restores__>:
    1df4:	2a 88       	ldd	r2, Y+18	; 0x12
    1df6:	39 88       	ldd	r3, Y+17	; 0x11
    1df8:	48 88       	ldd	r4, Y+16	; 0x10
    1dfa:	5f 84       	ldd	r5, Y+15	; 0x0f
    1dfc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1dfe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e00:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e02:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e04:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e06:	b9 84       	ldd	r11, Y+9	; 0x09
    1e08:	c8 84       	ldd	r12, Y+8	; 0x08
    1e0a:	df 80       	ldd	r13, Y+7	; 0x07
    1e0c:	ee 80       	ldd	r14, Y+6	; 0x06
    1e0e:	fd 80       	ldd	r15, Y+5	; 0x05
    1e10:	0c 81       	ldd	r16, Y+4	; 0x04
    1e12:	1b 81       	ldd	r17, Y+3	; 0x03
    1e14:	aa 81       	ldd	r26, Y+2	; 0x02
    1e16:	b9 81       	ldd	r27, Y+1	; 0x01
    1e18:	ce 0f       	add	r28, r30
    1e1a:	d1 1d       	adc	r29, r1
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	ed 01       	movw	r28, r26
    1e28:	08 95       	ret

00001e2a <__tablejump2__>:
    1e2a:	ee 0f       	add	r30, r30
    1e2c:	ff 1f       	adc	r31, r31
    1e2e:	05 90       	lpm	r0, Z+
    1e30:	f4 91       	lpm	r31, Z
    1e32:	e0 2d       	mov	r30, r0
    1e34:	09 94       	ijmp

00001e36 <malloc>:
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	82 30       	cpi	r24, 0x02	; 2
    1e40:	91 05       	cpc	r25, r1
    1e42:	10 f4       	brcc	.+4      	; 0x1e48 <malloc+0x12>
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <__flp>
    1e4c:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <__flp+0x1>
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	a0 e0       	ldi	r26, 0x00	; 0
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	30 97       	sbiw	r30, 0x00	; 0
    1e5a:	19 f1       	breq	.+70     	; 0x1ea2 <malloc+0x6c>
    1e5c:	40 81       	ld	r20, Z
    1e5e:	51 81       	ldd	r21, Z+1	; 0x01
    1e60:	02 81       	ldd	r16, Z+2	; 0x02
    1e62:	13 81       	ldd	r17, Z+3	; 0x03
    1e64:	48 17       	cp	r20, r24
    1e66:	59 07       	cpc	r21, r25
    1e68:	c8 f0       	brcs	.+50     	; 0x1e9c <malloc+0x66>
    1e6a:	84 17       	cp	r24, r20
    1e6c:	95 07       	cpc	r25, r21
    1e6e:	69 f4       	brne	.+26     	; 0x1e8a <malloc+0x54>
    1e70:	10 97       	sbiw	r26, 0x00	; 0
    1e72:	31 f0       	breq	.+12     	; 0x1e80 <malloc+0x4a>
    1e74:	12 96       	adiw	r26, 0x02	; 2
    1e76:	0c 93       	st	X, r16
    1e78:	12 97       	sbiw	r26, 0x02	; 2
    1e7a:	13 96       	adiw	r26, 0x03	; 3
    1e7c:	1c 93       	st	X, r17
    1e7e:	27 c0       	rjmp	.+78     	; 0x1ece <malloc+0x98>
    1e80:	00 93 ae 01 	sts	0x01AE, r16	; 0x8001ae <__flp>
    1e84:	10 93 af 01 	sts	0x01AF, r17	; 0x8001af <__flp+0x1>
    1e88:	22 c0       	rjmp	.+68     	; 0x1ece <malloc+0x98>
    1e8a:	21 15       	cp	r18, r1
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	19 f0       	breq	.+6      	; 0x1e96 <malloc+0x60>
    1e90:	42 17       	cp	r20, r18
    1e92:	53 07       	cpc	r21, r19
    1e94:	18 f4       	brcc	.+6      	; 0x1e9c <malloc+0x66>
    1e96:	9a 01       	movw	r18, r20
    1e98:	bd 01       	movw	r22, r26
    1e9a:	ef 01       	movw	r28, r30
    1e9c:	df 01       	movw	r26, r30
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	db cf       	rjmp	.-74     	; 0x1e58 <malloc+0x22>
    1ea2:	21 15       	cp	r18, r1
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	f9 f0       	breq	.+62     	; 0x1ee6 <malloc+0xb0>
    1ea8:	28 1b       	sub	r18, r24
    1eaa:	39 0b       	sbc	r19, r25
    1eac:	24 30       	cpi	r18, 0x04	; 4
    1eae:	31 05       	cpc	r19, r1
    1eb0:	80 f4       	brcc	.+32     	; 0x1ed2 <malloc+0x9c>
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb6:	61 15       	cp	r22, r1
    1eb8:	71 05       	cpc	r23, r1
    1eba:	21 f0       	breq	.+8      	; 0x1ec4 <malloc+0x8e>
    1ebc:	fb 01       	movw	r30, r22
    1ebe:	93 83       	std	Z+3, r25	; 0x03
    1ec0:	82 83       	std	Z+2, r24	; 0x02
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <malloc+0x96>
    1ec4:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <__flp+0x1>
    1ec8:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__flp>
    1ecc:	fe 01       	movw	r30, r28
    1ece:	32 96       	adiw	r30, 0x02	; 2
    1ed0:	44 c0       	rjmp	.+136    	; 0x1f5a <malloc+0x124>
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e2 0f       	add	r30, r18
    1ed6:	f3 1f       	adc	r31, r19
    1ed8:	81 93       	st	Z+, r24
    1eda:	91 93       	st	Z+, r25
    1edc:	22 50       	subi	r18, 0x02	; 2
    1ede:	31 09       	sbc	r19, r1
    1ee0:	39 83       	std	Y+1, r19	; 0x01
    1ee2:	28 83       	st	Y, r18
    1ee4:	3a c0       	rjmp	.+116    	; 0x1f5a <malloc+0x124>
    1ee6:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <__brkval>
    1eea:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <__brkval+0x1>
    1eee:	23 2b       	or	r18, r19
    1ef0:	41 f4       	brne	.+16     	; 0x1f02 <malloc+0xcc>
    1ef2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_start>
    1ef6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_start+0x1>
    1efa:	30 93 ad 01 	sts	0x01AD, r19	; 0x8001ad <__brkval+0x1>
    1efe:	20 93 ac 01 	sts	0x01AC, r18	; 0x8001ac <__brkval>
    1f02:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__malloc_heap_end>
    1f06:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__malloc_heap_end+0x1>
    1f0a:	21 15       	cp	r18, r1
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	41 f4       	brne	.+16     	; 0x1f20 <malloc+0xea>
    1f10:	2d b7       	in	r18, 0x3d	; 61
    1f12:	3e b7       	in	r19, 0x3e	; 62
    1f14:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    1f18:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    1f1c:	24 1b       	sub	r18, r20
    1f1e:	35 0b       	sbc	r19, r21
    1f20:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <__brkval>
    1f24:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <__brkval+0x1>
    1f28:	e2 17       	cp	r30, r18
    1f2a:	f3 07       	cpc	r31, r19
    1f2c:	a0 f4       	brcc	.+40     	; 0x1f56 <malloc+0x120>
    1f2e:	2e 1b       	sub	r18, r30
    1f30:	3f 0b       	sbc	r19, r31
    1f32:	28 17       	cp	r18, r24
    1f34:	39 07       	cpc	r19, r25
    1f36:	78 f0       	brcs	.+30     	; 0x1f56 <malloc+0x120>
    1f38:	ac 01       	movw	r20, r24
    1f3a:	4e 5f       	subi	r20, 0xFE	; 254
    1f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3e:	24 17       	cp	r18, r20
    1f40:	35 07       	cpc	r19, r21
    1f42:	48 f0       	brcs	.+18     	; 0x1f56 <malloc+0x120>
    1f44:	4e 0f       	add	r20, r30
    1f46:	5f 1f       	adc	r21, r31
    1f48:	50 93 ad 01 	sts	0x01AD, r21	; 0x8001ad <__brkval+0x1>
    1f4c:	40 93 ac 01 	sts	0x01AC, r20	; 0x8001ac <__brkval>
    1f50:	81 93       	st	Z+, r24
    1f52:	91 93       	st	Z+, r25
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <malloc+0x124>
    1f56:	e0 e0       	ldi	r30, 0x00	; 0
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	cf 01       	movw	r24, r30
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	1f 91       	pop	r17
    1f62:	0f 91       	pop	r16
    1f64:	08 95       	ret

00001f66 <free>:
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <free+0xa>
    1f6e:	81 c0       	rjmp	.+258    	; 0x2072 <free+0x10c>
    1f70:	fc 01       	movw	r30, r24
    1f72:	32 97       	sbiw	r30, 0x02	; 2
    1f74:	13 82       	std	Z+3, r1	; 0x03
    1f76:	12 82       	std	Z+2, r1	; 0x02
    1f78:	a0 91 ae 01 	lds	r26, 0x01AE	; 0x8001ae <__flp>
    1f7c:	b0 91 af 01 	lds	r27, 0x01AF	; 0x8001af <__flp+0x1>
    1f80:	10 97       	sbiw	r26, 0x00	; 0
    1f82:	81 f4       	brne	.+32     	; 0x1fa4 <free+0x3e>
    1f84:	20 81       	ld	r18, Z
    1f86:	31 81       	ldd	r19, Z+1	; 0x01
    1f88:	82 0f       	add	r24, r18
    1f8a:	93 1f       	adc	r25, r19
    1f8c:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <__brkval>
    1f90:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <__brkval+0x1>
    1f94:	28 17       	cp	r18, r24
    1f96:	39 07       	cpc	r19, r25
    1f98:	51 f5       	brne	.+84     	; 0x1fee <free+0x88>
    1f9a:	f0 93 ad 01 	sts	0x01AD, r31	; 0x8001ad <__brkval+0x1>
    1f9e:	e0 93 ac 01 	sts	0x01AC, r30	; 0x8001ac <__brkval>
    1fa2:	67 c0       	rjmp	.+206    	; 0x2072 <free+0x10c>
    1fa4:	ed 01       	movw	r28, r26
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	ce 17       	cp	r28, r30
    1fac:	df 07       	cpc	r29, r31
    1fae:	40 f4       	brcc	.+16     	; 0x1fc0 <free+0x5a>
    1fb0:	4a 81       	ldd	r20, Y+2	; 0x02
    1fb2:	5b 81       	ldd	r21, Y+3	; 0x03
    1fb4:	9e 01       	movw	r18, r28
    1fb6:	41 15       	cp	r20, r1
    1fb8:	51 05       	cpc	r21, r1
    1fba:	f1 f0       	breq	.+60     	; 0x1ff8 <free+0x92>
    1fbc:	ea 01       	movw	r28, r20
    1fbe:	f5 cf       	rjmp	.-22     	; 0x1faa <free+0x44>
    1fc0:	d3 83       	std	Z+3, r29	; 0x03
    1fc2:	c2 83       	std	Z+2, r28	; 0x02
    1fc4:	40 81       	ld	r20, Z
    1fc6:	51 81       	ldd	r21, Z+1	; 0x01
    1fc8:	84 0f       	add	r24, r20
    1fca:	95 1f       	adc	r25, r21
    1fcc:	c8 17       	cp	r28, r24
    1fce:	d9 07       	cpc	r29, r25
    1fd0:	59 f4       	brne	.+22     	; 0x1fe8 <free+0x82>
    1fd2:	88 81       	ld	r24, Y
    1fd4:	99 81       	ldd	r25, Y+1	; 0x01
    1fd6:	84 0f       	add	r24, r20
    1fd8:	95 1f       	adc	r25, r21
    1fda:	02 96       	adiw	r24, 0x02	; 2
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe4:	93 83       	std	Z+3, r25	; 0x03
    1fe6:	82 83       	std	Z+2, r24	; 0x02
    1fe8:	21 15       	cp	r18, r1
    1fea:	31 05       	cpc	r19, r1
    1fec:	29 f4       	brne	.+10     	; 0x1ff8 <free+0x92>
    1fee:	f0 93 af 01 	sts	0x01AF, r31	; 0x8001af <__flp+0x1>
    1ff2:	e0 93 ae 01 	sts	0x01AE, r30	; 0x8001ae <__flp>
    1ff6:	3d c0       	rjmp	.+122    	; 0x2072 <free+0x10c>
    1ff8:	e9 01       	movw	r28, r18
    1ffa:	fb 83       	std	Y+3, r31	; 0x03
    1ffc:	ea 83       	std	Y+2, r30	; 0x02
    1ffe:	49 91       	ld	r20, Y+
    2000:	59 91       	ld	r21, Y+
    2002:	c4 0f       	add	r28, r20
    2004:	d5 1f       	adc	r29, r21
    2006:	ec 17       	cp	r30, r28
    2008:	fd 07       	cpc	r31, r29
    200a:	61 f4       	brne	.+24     	; 0x2024 <free+0xbe>
    200c:	80 81       	ld	r24, Z
    200e:	91 81       	ldd	r25, Z+1	; 0x01
    2010:	84 0f       	add	r24, r20
    2012:	95 1f       	adc	r25, r21
    2014:	02 96       	adiw	r24, 0x02	; 2
    2016:	e9 01       	movw	r28, r18
    2018:	99 83       	std	Y+1, r25	; 0x01
    201a:	88 83       	st	Y, r24
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	9b 83       	std	Y+3, r25	; 0x03
    2022:	8a 83       	std	Y+2, r24	; 0x02
    2024:	e0 e0       	ldi	r30, 0x00	; 0
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	12 96       	adiw	r26, 0x02	; 2
    202a:	8d 91       	ld	r24, X+
    202c:	9c 91       	ld	r25, X
    202e:	13 97       	sbiw	r26, 0x03	; 3
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	19 f0       	breq	.+6      	; 0x203a <free+0xd4>
    2034:	fd 01       	movw	r30, r26
    2036:	dc 01       	movw	r26, r24
    2038:	f7 cf       	rjmp	.-18     	; 0x2028 <free+0xc2>
    203a:	8d 91       	ld	r24, X+
    203c:	9c 91       	ld	r25, X
    203e:	11 97       	sbiw	r26, 0x01	; 1
    2040:	9d 01       	movw	r18, r26
    2042:	2e 5f       	subi	r18, 0xFE	; 254
    2044:	3f 4f       	sbci	r19, 0xFF	; 255
    2046:	82 0f       	add	r24, r18
    2048:	93 1f       	adc	r25, r19
    204a:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <__brkval>
    204e:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <__brkval+0x1>
    2052:	28 17       	cp	r18, r24
    2054:	39 07       	cpc	r19, r25
    2056:	69 f4       	brne	.+26     	; 0x2072 <free+0x10c>
    2058:	30 97       	sbiw	r30, 0x00	; 0
    205a:	29 f4       	brne	.+10     	; 0x2066 <free+0x100>
    205c:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <__flp+0x1>
    2060:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <__flp>
    2064:	02 c0       	rjmp	.+4      	; 0x206a <free+0x104>
    2066:	13 82       	std	Z+3, r1	; 0x03
    2068:	12 82       	std	Z+2, r1	; 0x02
    206a:	b0 93 ad 01 	sts	0x01AD, r27	; 0x8001ad <__brkval+0x1>
    206e:	a0 93 ac 01 	sts	0x01AC, r26	; 0x8001ac <__brkval>
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	08 95       	ret

00002078 <__do_global_dtors>:
    2078:	10 e0       	ldi	r17, 0x00	; 0
    207a:	c1 e6       	ldi	r28, 0x61	; 97
    207c:	d0 e0       	ldi	r29, 0x00	; 0
    207e:	04 c0       	rjmp	.+8      	; 0x2088 <__do_global_dtors+0x10>
    2080:	fe 01       	movw	r30, r28
    2082:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__tablejump2__>
    2086:	21 96       	adiw	r28, 0x01	; 1
    2088:	c2 36       	cpi	r28, 0x62	; 98
    208a:	d1 07       	cpc	r29, r17
    208c:	c9 f7       	brne	.-14     	; 0x2080 <__do_global_dtors+0x8>
    208e:	f8 94       	cli

00002090 <__stop_program>:
    2090:	ff cf       	rjmp	.-2      	; 0x2090 <__stop_program>
